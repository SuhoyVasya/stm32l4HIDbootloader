
L476_CustomHID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006720  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006948  08006948  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006948  08006948  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006948  08006948  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08006950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  200001a0  08006af0  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  08006af0  00020b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146dd  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cc7  00000000  00000000  000348ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d40  00000000  00000000  00037578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  000382b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002884a  00000000  00000000  00038ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db06  00000000  00000000  000616ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e718a  00000000  00000000  0006f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015637a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003430  00000000  00000000  001563f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001a0 	.word	0x200001a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006890 	.word	0x08006890

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a4 	.word	0x200001a4
 80001c4:	08006890 	.word	0x08006890

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f95a 	bl	800048c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f005 fccd 	bl	8005b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <HAL_InitTick+0x68>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d022      	beq.n	8000252 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <HAL_InitTick+0x6c>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <HAL_InitTick+0x68>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000218:	fbb1 f3f3 	udiv	r3, r1, r3
 800021c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f968 	bl	80004f6 <HAL_SYSTICK_Config>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d10f      	bne.n	800024c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b0f      	cmp	r3, #15
 8000230:	d809      	bhi.n	8000246 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000232:	2200      	movs	r2, #0
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	f04f 30ff 	mov.w	r0, #4294967295
 800023a:	f000 f932 	bl	80004a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <HAL_InitTick+0x70>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	6013      	str	r3, [r2, #0]
 8000244:	e007      	b.n	8000256 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000246:	2301      	movs	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	e004      	b.n	8000256 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024c:	2301      	movs	r3, #1
 800024e:	73fb      	strb	r3, [r7, #15]
 8000250:	e001      	b.n	8000256 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000252:	2301      	movs	r3, #1
 8000254:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000256:	7bfb      	ldrb	r3, [r7, #15]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004
 8000264:	200000dc 	.word	0x200000dc
 8000268:	20000000 	.word	0x20000000

0800026c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_IncTick+0x1c>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x20>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4413      	add	r3, r2
 800027a:	4a03      	ldr	r2, [pc, #12]	; (8000288 <HAL_IncTick+0x1c>)
 800027c:	6013      	str	r3, [r2, #0]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	20000218 	.word	0x20000218
 800028c:	20000004 	.word	0x20000004

08000290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  return uwTick;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_GetTick+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
}
 8000298:	4618      	mov	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000218 	.word	0x20000218

080002a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b0:	f7ff ffee 	bl	8000290 <HAL_GetTick>
 80002b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c0:	d004      	beq.n	80002cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <HAL_Delay+0x40>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	4413      	add	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	bf00      	nop
 80002ce:	f7ff ffdf 	bl	8000290 <HAL_GetTick>
 80002d2:	4602      	mov	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x26>
  {
  }
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000004 	.word	0x20000004

080002ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f003 0307 	and.w	r3, r3, #7
 80002fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <__NVIC_SetPriorityGrouping+0x44>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000302:	68ba      	ldr	r2, [r7, #8]
 8000304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000308:	4013      	ands	r3, r2
 800030a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800031c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800031e:	4a04      	ldr	r2, [pc, #16]	; (8000330 <__NVIC_SetPriorityGrouping+0x44>)
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	60d3      	str	r3, [r2, #12]
}
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <__NVIC_GetPriorityGrouping+0x18>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	0a1b      	lsrs	r3, r3, #8
 800033e:	f003 0307 	and.w	r3, r3, #7
}
 8000342:	4618      	mov	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	2b00      	cmp	r3, #0
 8000360:	db0b      	blt.n	800037a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	f003 021f 	and.w	r2, r3, #31
 8000368:	4907      	ldr	r1, [pc, #28]	; (8000388 <__NVIC_EnableIRQ+0x38>)
 800036a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036e:	095b      	lsrs	r3, r3, #5
 8000370:	2001      	movs	r0, #1
 8000372:	fa00 f202 	lsl.w	r2, r0, r2
 8000376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	e000e100 	.word	0xe000e100

0800038c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	6039      	str	r1, [r7, #0]
 8000396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039c:	2b00      	cmp	r3, #0
 800039e:	db0a      	blt.n	80003b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	490c      	ldr	r1, [pc, #48]	; (80003d8 <__NVIC_SetPriority+0x4c>)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	0112      	lsls	r2, r2, #4
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	440b      	add	r3, r1
 80003b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003b4:	e00a      	b.n	80003cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	b2da      	uxtb	r2, r3
 80003ba:	4908      	ldr	r1, [pc, #32]	; (80003dc <__NVIC_SetPriority+0x50>)
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	f003 030f 	and.w	r3, r3, #15
 80003c2:	3b04      	subs	r3, #4
 80003c4:	0112      	lsls	r2, r2, #4
 80003c6:	b2d2      	uxtb	r2, r2
 80003c8:	440b      	add	r3, r1
 80003ca:	761a      	strb	r2, [r3, #24]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	e000e100 	.word	0xe000e100
 80003dc:	e000ed00 	.word	0xe000ed00

080003e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b089      	sub	sp, #36	; 0x24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f003 0307 	and.w	r3, r3, #7
 80003f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003f4:	69fb      	ldr	r3, [r7, #28]
 80003f6:	f1c3 0307 	rsb	r3, r3, #7
 80003fa:	2b04      	cmp	r3, #4
 80003fc:	bf28      	it	cs
 80003fe:	2304      	movcs	r3, #4
 8000400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	3304      	adds	r3, #4
 8000406:	2b06      	cmp	r3, #6
 8000408:	d902      	bls.n	8000410 <NVIC_EncodePriority+0x30>
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	3b03      	subs	r3, #3
 800040e:	e000      	b.n	8000412 <NVIC_EncodePriority+0x32>
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000414:	f04f 32ff 	mov.w	r2, #4294967295
 8000418:	69bb      	ldr	r3, [r7, #24]
 800041a:	fa02 f303 	lsl.w	r3, r2, r3
 800041e:	43da      	mvns	r2, r3
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	401a      	ands	r2, r3
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000428:	f04f 31ff 	mov.w	r1, #4294967295
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	43d9      	mvns	r1, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000438:	4313      	orrs	r3, r2
         );
}
 800043a:	4618      	mov	r0, r3
 800043c:	3724      	adds	r7, #36	; 0x24
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
	...

08000448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3b01      	subs	r3, #1
 8000454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000458:	d301      	bcc.n	800045e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800045a:	2301      	movs	r3, #1
 800045c:	e00f      	b.n	800047e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <SysTick_Config+0x40>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3b01      	subs	r3, #1
 8000464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000466:	210f      	movs	r1, #15
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	f7ff ff8e 	bl	800038c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <SysTick_Config+0x40>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000476:	4b04      	ldr	r3, [pc, #16]	; (8000488 <SysTick_Config+0x40>)
 8000478:	2207      	movs	r2, #7
 800047a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	e000e010 	.word	0xe000e010

0800048c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ff29 	bl	80002ec <__NVIC_SetPriorityGrouping>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b086      	sub	sp, #24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	4603      	mov	r3, r0
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
 80004ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004b4:	f7ff ff3e 	bl	8000334 <__NVIC_GetPriorityGrouping>
 80004b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	6978      	ldr	r0, [r7, #20]
 80004c0:	f7ff ff8e 	bl	80003e0 <NVIC_EncodePriority>
 80004c4:	4602      	mov	r2, r0
 80004c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff5d 	bl	800038c <__NVIC_SetPriority>
}
 80004d2:	bf00      	nop
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	4603      	mov	r3, r0
 80004e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ff31 	bl	8000350 <__NVIC_EnableIRQ>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f7ff ffa2 	bl	8000448 <SysTick_Config>
 8000504:	4603      	mov	r3, r0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800051e:	e17f      	b.n	8000820 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	2101      	movs	r1, #1
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	fa01 f303 	lsl.w	r3, r1, r3
 800052c:	4013      	ands	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2b00      	cmp	r3, #0
 8000534:	f000 8171 	beq.w	800081a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d003      	beq.n	8000548 <HAL_GPIO_Init+0x38>
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b12      	cmp	r3, #18
 8000546:	d123      	bne.n	8000590 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	08da      	lsrs	r2, r3, #3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3208      	adds	r2, #8
 8000550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000554:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	f003 0307 	and.w	r3, r3, #7
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	220f      	movs	r2, #15
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	43db      	mvns	r3, r3
 8000566:	693a      	ldr	r2, [r7, #16]
 8000568:	4013      	ands	r3, r2
 800056a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	691a      	ldr	r2, [r3, #16]
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	4313      	orrs	r3, r2
 8000580:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	08da      	lsrs	r2, r3, #3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3208      	adds	r2, #8
 800058a:	6939      	ldr	r1, [r7, #16]
 800058c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	2203      	movs	r2, #3
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	43db      	mvns	r3, r3
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	4013      	ands	r3, r2
 80005a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	f003 0203 	and.w	r2, r3, #3
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	693a      	ldr	r2, [r7, #16]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00b      	beq.n	80005e4 <HAL_GPIO_Init+0xd4>
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d007      	beq.n	80005e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005d8:	2b11      	cmp	r3, #17
 80005da:	d003      	beq.n	80005e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	2b12      	cmp	r3, #18
 80005e2:	d130      	bne.n	8000646 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2203      	movs	r2, #3
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	68da      	ldr	r2, [r3, #12]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	693a      	ldr	r2, [r7, #16]
 800060a:	4313      	orrs	r3, r2
 800060c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800061a:	2201      	movs	r2, #1
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	43db      	mvns	r3, r3
 8000624:	693a      	ldr	r2, [r7, #16]
 8000626:	4013      	ands	r3, r2
 8000628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	091b      	lsrs	r3, r3, #4
 8000630:	f003 0201 	and.w	r2, r3, #1
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	4313      	orrs	r3, r2
 800063e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	f003 0303 	and.w	r3, r3, #3
 800064e:	2b03      	cmp	r3, #3
 8000650:	d118      	bne.n	8000684 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000658:	2201      	movs	r2, #1
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	43db      	mvns	r3, r3
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	4013      	ands	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	08db      	lsrs	r3, r3, #3
 800066e:	f003 0201 	and.w	r2, r3, #1
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4313      	orrs	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	693a      	ldr	r2, [r7, #16]
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	2203      	movs	r2, #3
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	43db      	mvns	r3, r3
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4013      	ands	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	f000 80ac 	beq.w	800081a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b5e      	ldr	r3, [pc, #376]	; (800083c <HAL_GPIO_Init+0x32c>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c6:	4a5d      	ldr	r2, [pc, #372]	; (800083c <HAL_GPIO_Init+0x32c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6613      	str	r3, [r2, #96]	; 0x60
 80006ce:	4b5b      	ldr	r3, [pc, #364]	; (800083c <HAL_GPIO_Init+0x32c>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80006da:	4a59      	ldr	r2, [pc, #356]	; (8000840 <HAL_GPIO_Init+0x330>)
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	089b      	lsrs	r3, r3, #2
 80006e0:	3302      	adds	r3, #2
 80006e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	f003 0303 	and.w	r3, r3, #3
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	220f      	movs	r2, #15
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	43db      	mvns	r3, r3
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	4013      	ands	r3, r2
 80006fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000704:	d025      	beq.n	8000752 <HAL_GPIO_Init+0x242>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a4e      	ldr	r2, [pc, #312]	; (8000844 <HAL_GPIO_Init+0x334>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d01f      	beq.n	800074e <HAL_GPIO_Init+0x23e>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a4d      	ldr	r2, [pc, #308]	; (8000848 <HAL_GPIO_Init+0x338>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d019      	beq.n	800074a <HAL_GPIO_Init+0x23a>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a4c      	ldr	r2, [pc, #304]	; (800084c <HAL_GPIO_Init+0x33c>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d013      	beq.n	8000746 <HAL_GPIO_Init+0x236>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a4b      	ldr	r2, [pc, #300]	; (8000850 <HAL_GPIO_Init+0x340>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d00d      	beq.n	8000742 <HAL_GPIO_Init+0x232>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a4a      	ldr	r2, [pc, #296]	; (8000854 <HAL_GPIO_Init+0x344>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d007      	beq.n	800073e <HAL_GPIO_Init+0x22e>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a49      	ldr	r2, [pc, #292]	; (8000858 <HAL_GPIO_Init+0x348>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d101      	bne.n	800073a <HAL_GPIO_Init+0x22a>
 8000736:	2306      	movs	r3, #6
 8000738:	e00c      	b.n	8000754 <HAL_GPIO_Init+0x244>
 800073a:	2307      	movs	r3, #7
 800073c:	e00a      	b.n	8000754 <HAL_GPIO_Init+0x244>
 800073e:	2305      	movs	r3, #5
 8000740:	e008      	b.n	8000754 <HAL_GPIO_Init+0x244>
 8000742:	2304      	movs	r3, #4
 8000744:	e006      	b.n	8000754 <HAL_GPIO_Init+0x244>
 8000746:	2303      	movs	r3, #3
 8000748:	e004      	b.n	8000754 <HAL_GPIO_Init+0x244>
 800074a:	2302      	movs	r3, #2
 800074c:	e002      	b.n	8000754 <HAL_GPIO_Init+0x244>
 800074e:	2301      	movs	r3, #1
 8000750:	e000      	b.n	8000754 <HAL_GPIO_Init+0x244>
 8000752:	2300      	movs	r3, #0
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	f002 0203 	and.w	r2, r2, #3
 800075a:	0092      	lsls	r2, r2, #2
 800075c:	4093      	lsls	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	4313      	orrs	r3, r2
 8000762:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000764:	4936      	ldr	r1, [pc, #216]	; (8000840 <HAL_GPIO_Init+0x330>)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	089b      	lsrs	r3, r3, #2
 800076a:	3302      	adds	r3, #2
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <HAL_GPIO_Init+0x34c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	43db      	mvns	r3, r3
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	4013      	ands	r3, r2
 8000780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d003      	beq.n	8000796 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4313      	orrs	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000796:	4a31      	ldr	r2, [pc, #196]	; (800085c <HAL_GPIO_Init+0x34c>)
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800079c:	4b2f      	ldr	r3, [pc, #188]	; (800085c <HAL_GPIO_Init+0x34c>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	43db      	mvns	r3, r3
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	4013      	ands	r3, r2
 80007aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d003      	beq.n	80007c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80007b8:	693a      	ldr	r2, [r7, #16]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	4313      	orrs	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80007c0:	4a26      	ldr	r2, [pc, #152]	; (800085c <HAL_GPIO_Init+0x34c>)
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <HAL_GPIO_Init+0x34c>)
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	43db      	mvns	r3, r3
 80007d0:	693a      	ldr	r2, [r7, #16]
 80007d2:	4013      	ands	r3, r2
 80007d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d003      	beq.n	80007ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <HAL_GPIO_Init+0x34c>)
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <HAL_GPIO_Init+0x34c>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	43db      	mvns	r3, r3
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000808:	2b00      	cmp	r3, #0
 800080a:	d003      	beq.n	8000814 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	4313      	orrs	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000814:	4a11      	ldr	r2, [pc, #68]	; (800085c <HAL_GPIO_Init+0x34c>)
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa22 f303 	lsr.w	r3, r2, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	f47f ae78 	bne.w	8000520 <HAL_GPIO_Init+0x10>
  }
}
 8000830:	bf00      	nop
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	40021000 	.word	0x40021000
 8000840:	40010000 	.word	0x40010000
 8000844:	48000400 	.word	0x48000400
 8000848:	48000800 	.word	0x48000800
 800084c:	48000c00 	.word	0x48000c00
 8000850:	48001000 	.word	0x48001000
 8000854:	48001400 	.word	0x48001400
 8000858:	48001800 	.word	0x48001800
 800085c:	40010400 	.word	0x40010400

08000860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691a      	ldr	r2, [r3, #16]
 8000870:	887b      	ldrh	r3, [r7, #2]
 8000872:	4013      	ands	r3, r2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000878:	2301      	movs	r3, #1
 800087a:	73fb      	strb	r3, [r7, #15]
 800087c:	e001      	b.n	8000882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000882:	7bfb      	ldrb	r3, [r7, #15]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	807b      	strh	r3, [r7, #2]
 800089c:	4613      	mov	r3, r2
 800089e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008a0:	787b      	ldrb	r3, [r7, #1]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d003      	beq.n	80008ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008a6:	887a      	ldrh	r2, [r7, #2]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008ac:	e002      	b.n	80008b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008ae:	887a      	ldrh	r2, [r7, #2]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b08f      	sub	sp, #60	; 0x3c
 80008c4:	af0a      	add	r7, sp, #40	; 0x28
 80008c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e116      	b.n	8000b00 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d106      	bne.n	80008f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f005 fa0d 	bl	8005d0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2203      	movs	r2, #3
 80008f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fbe6 	bl	80030e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	687e      	ldr	r6, [r7, #4]
 800091e:	466d      	mov	r5, sp
 8000920:	f106 0410 	add.w	r4, r6, #16
 8000924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000930:	e885 0003 	stmia.w	r5, {r0, r1}
 8000934:	1d33      	adds	r3, r6, #4
 8000936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000938:	6838      	ldr	r0, [r7, #0]
 800093a:	f002 fad3 	bl	8002ee4 <USB_CoreInit>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d005      	beq.n	8000950 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2202      	movs	r2, #2
 8000948:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e0d7      	b.n	8000b00 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f002 fbd4 	bl	8003104 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800095c:	2300      	movs	r3, #0
 800095e:	73fb      	strb	r3, [r7, #15]
 8000960:	e04a      	b.n	80009f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000962:	7bfa      	ldrb	r2, [r7, #15]
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	4613      	mov	r3, r2
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	1a9b      	subs	r3, r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	333d      	adds	r3, #61	; 0x3d
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000976:	7bfa      	ldrb	r2, [r7, #15]
 8000978:	6879      	ldr	r1, [r7, #4]
 800097a:	4613      	mov	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	1a9b      	subs	r3, r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	440b      	add	r3, r1
 8000984:	333c      	adds	r3, #60	; 0x3c
 8000986:	7bfa      	ldrb	r2, [r7, #15]
 8000988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800098a:	7bfa      	ldrb	r2, [r7, #15]
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	b298      	uxth	r0, r3
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	4613      	mov	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	1a9b      	subs	r3, r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	440b      	add	r3, r1
 800099c:	3342      	adds	r3, #66	; 0x42
 800099e:	4602      	mov	r2, r0
 80009a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009a2:	7bfa      	ldrb	r2, [r7, #15]
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	4613      	mov	r3, r2
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	440b      	add	r3, r1
 80009b0:	333f      	adds	r3, #63	; 0x3f
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80009b6:	7bfa      	ldrb	r2, [r7, #15]
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	4613      	mov	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	440b      	add	r3, r1
 80009c4:	3344      	adds	r3, #68	; 0x44
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	4613      	mov	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	440b      	add	r3, r1
 80009d8:	3348      	adds	r3, #72	; 0x48
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	4613      	mov	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	1a9b      	subs	r3, r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	440b      	add	r3, r1
 80009ec:	3350      	adds	r3, #80	; 0x50
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	3301      	adds	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
 80009f8:	7bfa      	ldrb	r2, [r7, #15]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d3af      	bcc.n	8000962 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e044      	b.n	8000a92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000a08:	7bfa      	ldrb	r2, [r7, #15]
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	1a9b      	subs	r3, r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	440b      	add	r3, r1
 8000a16:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000a1e:	7bfa      	ldrb	r2, [r7, #15]
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000a30:	7bfa      	ldrb	r2, [r7, #15]
 8000a32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a34:	7bfa      	ldrb	r2, [r7, #15]
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	1a9b      	subs	r3, r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a4a:	7bfa      	ldrb	r2, [r7, #15]
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	1a9b      	subs	r3, r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	440b      	add	r3, r1
 8000a58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a60:	7bfa      	ldrb	r2, [r7, #15]
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	4613      	mov	r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	1a9b      	subs	r3, r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a76:	7bfa      	ldrb	r2, [r7, #15]
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	7bfa      	ldrb	r2, [r7, #15]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3b5      	bcc.n	8000a08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	687e      	ldr	r6, [r7, #4]
 8000aa4:	466d      	mov	r5, sp
 8000aa6:	f106 0410 	add.w	r4, r6, #16
 8000aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ab6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000aba:	1d33      	adds	r3, r6, #4
 8000abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	f002 fb4a 	bl	8003158 <USB_DevInit>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d005      	beq.n	8000ad6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2202      	movs	r2, #2
 8000ace:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e014      	b.n	8000b00 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d102      	bne.n	8000af4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 ff28 	bl	8001944 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fa61 	bl	8003fc0 <USB_DevDisconnect>

  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d101      	bne.n	8000b24 <HAL_PCD_Start+0x1c>
 8000b20:	2302      	movs	r3, #2
 8000b22:	e01c      	b.n	8000b5e <HAL_PCD_Start+0x56>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d105      	bne.n	8000b40 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 fa23 	bl	8003f90 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fab6 	bl	80030c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000b66:	b590      	push	{r4, r7, lr}
 8000b68:	b08d      	sub	sp, #52	; 0x34
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fac8 	bl	8004116 <USB_GetMode>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f040 836b 	bne.w	8001264 <HAL_PCD_IRQHandler+0x6fe>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 fa2c 	bl	8003ff0 <USB_ReadInterrupts>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 8361 	beq.w	8001262 <HAL_PCD_IRQHandler+0x6fc>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 fa23 	bl	8003ff0 <USB_ReadInterrupts>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d107      	bne.n	8000bc4 <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f002 0202 	and.w	r2, r2, #2
 8000bc2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fa11 	bl	8003ff0 <USB_ReadInterrupts>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000bd8:	d16e      	bne.n	8000cb8 <HAL_PCD_IRQHandler+0x152>
    {
      epnum = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f003 fa17 	bl	8004016 <USB_ReadDevAllOutEpInterrupt>
 8000be8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000bea:	e062      	b.n	8000cb2 <HAL_PCD_IRQHandler+0x14c>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d057      	beq.n	8000ca6 <HAL_PCD_IRQHandler+0x140>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 fa3c 	bl	800407e <USB_ReadDevOutEPInterrupt>
 8000c06:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00c      	beq.n	8000c2c <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	015a      	lsls	r2, r3, #5
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	4413      	add	r3, r2
 8000c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000c1e:	461a      	mov	r2, r3
 8000c20:	2301      	movs	r3, #1
 8000c22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 fdb2 	bl	8001790 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00c      	beq.n	8000c50 <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 fdf7 	bl	800182c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	015a      	lsls	r2, r3, #5
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	4413      	add	r3, r2
 8000c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d008      	beq.n	8000c6c <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	015a      	lsls	r2, r3, #5
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	4413      	add	r3, r2
 8000c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000c66:	461a      	mov	r2, r3
 8000c68:	2310      	movs	r3, #16
 8000c6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	f003 0320 	and.w	r3, r3, #32
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d008      	beq.n	8000c88 <HAL_PCD_IRQHandler+0x122>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	015a      	lsls	r2, r3, #5
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000c82:	461a      	mov	r2, r3
 8000c84:	2320      	movs	r3, #32
 8000c86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d009      	beq.n	8000ca6 <HAL_PCD_IRQHandler+0x140>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	015a      	lsls	r2, r3, #5
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	4413      	add	r3, r2
 8000c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	3301      	adds	r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cae:	085b      	lsrs	r3, r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d199      	bne.n	8000bec <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 f997 	bl	8003ff0 <USB_ReadInterrupts>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000ccc:	f040 8087 	bne.w	8000dde <HAL_PCD_IRQHandler+0x278>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 f9b8 	bl	800404a <USB_ReadDevAllInEpInterrupt>
 8000cda:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8000ce0:	e07a      	b.n	8000dd8 <HAL_PCD_IRQHandler+0x272>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d06f      	beq.n	8000dcc <HAL_PCD_IRQHandler+0x266>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 f9df 	bl	80040ba <USB_ReadDevInEPInterrupt>
 8000cfc:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d020      	beq.n	8000d4a <HAL_PCD_IRQHandler+0x1e4>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	2201      	movs	r2, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69f9      	ldr	r1, [r7, #28]
 8000d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000d28:	4013      	ands	r3, r2
 8000d2a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	015a      	lsls	r2, r3, #5
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	4413      	add	r3, r2
 8000d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000d38:	461a      	mov	r2, r3
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f005 f874 	bl	8005e32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d008      	beq.n	8000d66 <HAL_PCD_IRQHandler+0x200>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	015a      	lsls	r2, r3, #5
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000d60:	461a      	mov	r2, r3
 8000d62:	2308      	movs	r3, #8
 8000d64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d008      	beq.n	8000d82 <HAL_PCD_IRQHandler+0x21c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	015a      	lsls	r2, r3, #5
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	4413      	add	r3, r2
 8000d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2310      	movs	r3, #16
 8000d80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d008      	beq.n	8000d9e <HAL_PCD_IRQHandler+0x238>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	015a      	lsls	r2, r3, #5
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	4413      	add	r3, r2
 8000d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2340      	movs	r3, #64	; 0x40
 8000d9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d008      	beq.n	8000dba <HAL_PCD_IRQHandler+0x254>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	015a      	lsls	r2, r3, #5
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	4413      	add	r3, r2
 8000db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000db4:	461a      	mov	r2, r3
 8000db6:	2302      	movs	r3, #2
 8000db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_PCD_IRQHandler+0x266>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8000dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 fc59 	bl	800167e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	3301      	adds	r3, #1
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d181      	bne.n	8000ce2 <HAL_PCD_IRQHandler+0x17c>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f904 	bl	8003ff0 <USB_ReadInterrupts>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	d122      	bne.n	8000e3a <HAL_PCD_IRQHandler+0x2d4>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000e02:	f023 0301 	bic.w	r3, r3, #1
 8000e06:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d108      	bne.n	8000e24 <HAL_PCD_IRQHandler+0x2be>
      {
        hpcd->LPM_State = LPM_L0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f005 fb11 	bl	8006444 <HAL_PCDEx_LPM_Callback>
 8000e22:	e002      	b.n	8000e2a <HAL_PCD_IRQHandler+0x2c4>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f005 f871 	bl	8005f0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	695a      	ldr	r2, [r3, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8000e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 f8d6 	bl	8003ff0 <USB_ReadInterrupts>
 8000e44:	4603      	mov	r3, r0
 8000e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e4e:	d112      	bne.n	8000e76 <HAL_PCD_IRQHandler+0x310>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d102      	bne.n	8000e66 <HAL_PCD_IRQHandler+0x300>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f005 f82d 	bl	8005ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	695a      	ldr	r2, [r3, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000e74:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 f8b8 	bl	8003ff0 <USB_ReadInterrupts>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000e8a:	d121      	bne.n	8000ed0 <HAL_PCD_IRQHandler+0x36a>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8000e9a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d111      	bne.n	8000eca <HAL_PCD_IRQHandler+0x364>
      {
        hpcd->LPM_State = LPM_L1;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	f003 020f 	and.w	r2, r3, #15
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f005 fabe 	bl	8006444 <HAL_PCDEx_LPM_Callback>
 8000ec8:	e002      	b.n	8000ed0 <HAL_PCD_IRQHandler+0x36a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f004 fff8 	bl	8005ec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 f88b 	bl	8003ff0 <USB_ReadInterrupts>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ee4:	f040 80a5 	bne.w	8001032 <HAL_PCD_IRQHandler+0x4cc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000ef6:	f023 0301 	bic.w	r3, r3, #1
 8000efa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2110      	movs	r1, #16
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 fa6a 	bl	80033dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f0c:	e036      	b.n	8000f7c <HAL_PCD_IRQHandler+0x416>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f10:	015a      	lsls	r2, r3, #5
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	4413      	add	r3, r2
 8000f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000f20:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8000f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f24:	015a      	lsls	r2, r3, #5
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	4413      	add	r3, r2
 8000f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f32:	0151      	lsls	r1, r2, #5
 8000f34:	69fa      	ldr	r2, [r7, #28]
 8000f36:	440a      	add	r2, r1
 8000f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8000f3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8000f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f44:	015a      	lsls	r2, r3, #5
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	4413      	add	r3, r2
 8000f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000f54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8000f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f58:	015a      	lsls	r2, r3, #5
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f66:	0151      	lsls	r1, r2, #5
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	440a      	add	r2, r1
 8000f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8000f70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f78:	3301      	adds	r3, #1
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d3c3      	bcc.n	8000f0e <HAL_PCD_IRQHandler+0x3a8>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f94:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000f98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d016      	beq.n	8000fd0 <HAL_PCD_IRQHandler+0x46a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000fb2:	f043 030b 	orr.w	r3, r3, #11
 8000fb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000fc8:	f043 030b 	orr.w	r3, r3, #11
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	e015      	b.n	8000ffc <HAL_PCD_IRQHandler+0x496>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000fde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fe2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8000fe6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000ff6:	f043 030b 	orr.w	r3, r3, #11
 8000ffa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800100a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800100e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800101a:	4619      	mov	r1, r3
 800101c:	4610      	mov	r0, r2
 800101e:	f003 f8bd 	bl	800419c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	695a      	ldr	r2, [r3, #20]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f002 ffda 	bl	8003ff0 <USB_ReadInterrupts>
 800103c:	4603      	mov	r3, r0
 800103e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001046:	d124      	bne.n	8001092 <HAL_PCD_IRQHandler+0x52c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f003 f870 	bl	8004132 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fa21 	bl	800349e <USB_GetDevSpeed>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681c      	ldr	r4, [r3, #0]
 8001068:	f001 fa20 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 800106c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	4620      	mov	r0, r4
 8001078:	f001 ff86 	bl	8002f88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f004 ff00 	bl	8005e82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	695a      	ldr	r2, [r3, #20]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001090:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f002 ffaa 	bl	8003ff0 <USB_ReadInterrupts>
 800109c:	4603      	mov	r3, r0
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d161      	bne.n	800116a <HAL_PCD_IRQHandler+0x604>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	699a      	ldr	r2, [r3, #24]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0210 	bic.w	r2, r2, #16
 80010b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	f003 020f 	and.w	r2, r3, #15
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	3304      	adds	r3, #4
 80010d4:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	0c5b      	lsrs	r3, r3, #17
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d124      	bne.n	800112c <HAL_PCD_IRQHandler+0x5c6>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d035      	beq.n	800115a <HAL_PCD_IRQHandler+0x5f4>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	6a38      	ldr	r0, [r7, #32]
 8001102:	f002 fe22 	bl	8003d4a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001112:	441a      	add	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	699a      	ldr	r2, [r3, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001124:	441a      	add	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	619a      	str	r2, [r3, #24]
 800112a:	e016      	b.n	800115a <HAL_PCD_IRQHandler+0x5f4>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	0c5b      	lsrs	r3, r3, #17
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	2b06      	cmp	r3, #6
 8001136:	d110      	bne.n	800115a <HAL_PCD_IRQHandler+0x5f4>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800113e:	2208      	movs	r2, #8
 8001140:	4619      	mov	r1, r3
 8001142:	6a38      	ldr	r0, [r7, #32]
 8001144:	f002 fe01 	bl	8003d4a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001154:	441a      	add	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	699a      	ldr	r2, [r3, #24]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f042 0210 	orr.w	r2, r2, #16
 8001168:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f002 ff3e 	bl	8003ff0 <USB_ReadInterrupts>
 8001174:	4603      	mov	r3, r0
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b08      	cmp	r3, #8
 800117c:	d10a      	bne.n	8001194 <HAL_PCD_IRQHandler+0x62e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f004 fe71 	bl	8005e66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f002 0208 	and.w	r2, r2, #8
 8001192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f002 ff29 	bl	8003ff0 <USB_ReadInterrupts>
 800119e:	4603      	mov	r3, r0
 80011a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011a8:	d10d      	bne.n	80011c6 <HAL_PCD_IRQHandler+0x660>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f004 fee5 	bl	8005f80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	695a      	ldr	r2, [r3, #20]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80011c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 ff10 	bl	8003ff0 <USB_ReadInterrupts>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011da:	d10d      	bne.n	80011f8 <HAL_PCD_IRQHandler+0x692>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4619      	mov	r1, r3
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f004 feba 	bl	8005f5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80011f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 fef7 	bl	8003ff0 <USB_ReadInterrupts>
 8001202:	4603      	mov	r3, r0
 8001204:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120c:	d10a      	bne.n	8001224 <HAL_PCD_IRQHandler+0x6be>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f004 fec8 	bl	8005fa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f002 fee1 	bl	8003ff0 <USB_ReadInterrupts>
 800122e:	4603      	mov	r3, r0
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b04      	cmp	r3, #4
 8001236:	d115      	bne.n	8001264 <HAL_PCD_IRQHandler+0x6fe>
    {
      temp = hpcd->Instance->GOTGINT;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <HAL_PCD_IRQHandler+0x6ea>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f004 feb8 	bl	8005fc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6859      	ldr	r1, [r3, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	430a      	orrs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	e000      	b.n	8001264 <HAL_PCD_IRQHandler+0x6fe>
      return;
 8001262:	bf00      	nop
    }
  }
}
 8001264:	3734      	adds	r7, #52	; 0x34
 8001266:	46bd      	mov	sp, r7
 8001268:	bd90      	pop	{r4, r7, pc}

0800126a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_PCD_SetAddress+0x1a>
 8001280:	2302      	movs	r3, #2
 8001282:	e013      	b.n	80012ac <HAL_PCD_SetAddress+0x42>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	78fa      	ldrb	r2, [r7, #3]
 8001290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	78fa      	ldrb	r2, [r7, #3]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f002 fe51 	bl	8003f44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	70fb      	strb	r3, [r7, #3]
 80012c6:	460b      	mov	r3, r1
 80012c8:	803b      	strh	r3, [r7, #0]
 80012ca:	4613      	mov	r3, r2
 80012cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da0f      	bge.n	80012fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f003 020f 	and.w	r2, r3, #15
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	3338      	adds	r3, #56	; 0x38
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	3304      	adds	r3, #4
 80012f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2201      	movs	r2, #1
 80012f6:	705a      	strb	r2, [r3, #1]
 80012f8:	e00f      	b.n	800131a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	f003 020f 	and.w	r2, r3, #15
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	3304      	adds	r3, #4
 8001312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	b2da      	uxtb	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001326:	883a      	ldrh	r2, [r7, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	78ba      	ldrb	r2, [r7, #2]
 8001330:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	785b      	ldrb	r3, [r3, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d004      	beq.n	8001344 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b29a      	uxth	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001344:	78bb      	ldrb	r3, [r7, #2]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d102      	bne.n	8001350 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_PCD_EP_Open+0xaa>
 800135a:	2302      	movs	r3, #2
 800135c:	e00e      	b.n	800137c <HAL_PCD_EP_Open+0xc8>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68f9      	ldr	r1, [r7, #12]
 800136c:	4618      	mov	r0, r3
 800136e:	f002 f8b5 	bl	80034dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800137a:	7afb      	ldrb	r3, [r7, #11]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001394:	2b00      	cmp	r3, #0
 8001396:	da0f      	bge.n	80013b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	f003 020f 	and.w	r2, r3, #15
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	1a9b      	subs	r3, r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	3338      	adds	r3, #56	; 0x38
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	3304      	adds	r3, #4
 80013ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2201      	movs	r2, #1
 80013b4:	705a      	strb	r2, [r3, #1]
 80013b6:	e00f      	b.n	80013d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	f003 020f 	and.w	r2, r3, #15
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	3304      	adds	r3, #4
 80013d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_PCD_EP_Close+0x6e>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e00e      	b.n	8001410 <HAL_PCD_EP_Close+0x8c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	4618      	mov	r0, r3
 8001402:	f002 f8f3 	bl	80035ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	460b      	mov	r3, r1
 8001426:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001428:	7afb      	ldrb	r3, [r7, #11]
 800142a:	f003 020f 	and.w	r2, r3, #15
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	3304      	adds	r3, #4
 8001440:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2200      	movs	r2, #0
 8001458:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800145a:	7afb      	ldrb	r3, [r7, #11]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	b2da      	uxtb	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	2b00      	cmp	r3, #0
 800146e:	d106      	bne.n	800147e <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6979      	ldr	r1, [r7, #20]
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fb18 	bl	8003aac <USB_EP0StartXfer>
 800147c:	e005      	b.n	800148a <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6979      	ldr	r1, [r7, #20]
 8001484:	4618      	mov	r0, r3
 8001486:	f002 f935 	bl	80036f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	460b      	mov	r3, r1
 80014a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	f003 020f 	and.w	r2, r3, #15
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	3338      	adds	r3, #56	; 0x38
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2201      	movs	r2, #1
 80014d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d4:	7afb      	ldrb	r3, [r7, #11]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014e0:	7afb      	ldrb	r3, [r7, #11]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6979      	ldr	r1, [r7, #20]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fadb 	bl	8003aac <USB_EP0StartXfer>
 80014f6:	e005      	b.n	8001504 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6979      	ldr	r1, [r7, #20]
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 f8f8 	bl	80036f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	f003 020f 	and.w	r2, r3, #15
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	d901      	bls.n	800152c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e04e      	b.n	80015ca <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800152c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001530:	2b00      	cmp	r3, #0
 8001532:	da0f      	bge.n	8001554 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	f003 020f 	and.w	r2, r3, #15
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	3338      	adds	r3, #56	; 0x38
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	3304      	adds	r3, #4
 800154a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	705a      	strb	r2, [r3, #1]
 8001552:	e00d      	b.n	8001570 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001554:	78fa      	ldrb	r2, [r7, #3]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	3304      	adds	r3, #4
 8001568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	b2da      	uxtb	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_PCD_EP_SetStall+0x82>
 800158c:	2302      	movs	r3, #2
 800158e:	e01c      	b.n	80015ca <HAL_PCD_EP_SetStall+0xbc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68f9      	ldr	r1, [r7, #12]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fbfc 	bl	8003d9c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d108      	bne.n	80015c0 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4610      	mov	r0, r2
 80015bc:	f002 fdee 	bl	800419c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	f003 020f 	and.w	r2, r3, #15
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d901      	bls.n	80015f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e042      	b.n	8001676 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	da0f      	bge.n	8001618 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	f003 020f 	and.w	r2, r3, #15
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	3338      	adds	r3, #56	; 0x38
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	3304      	adds	r3, #4
 800160e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2201      	movs	r2, #1
 8001614:	705a      	strb	r2, [r3, #1]
 8001616:	e00f      	b.n	8001638 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	f003 020f 	and.w	r2, r3, #15
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	3304      	adds	r3, #4
 8001630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	b2da      	uxtb	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_PCD_EP_ClrStall+0x86>
 8001654:	2302      	movs	r3, #2
 8001656:	e00e      	b.n	8001676 <HAL_PCD_EP_ClrStall+0xa4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68f9      	ldr	r1, [r7, #12]
 8001666:	4618      	mov	r0, r3
 8001668:	f002 fc06 	bl	8003e78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b088      	sub	sp, #32
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	3338      	adds	r3, #56	; 0x38
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	3304      	adds	r3, #4
 80016a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d901      	bls.n	80016b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e067      	b.n	8001786 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d902      	bls.n	80016d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3303      	adds	r3, #3
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80016da:	e026      	b.n	800172a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d902      	bls.n	80016f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	3303      	adds	r3, #3
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	68d9      	ldr	r1, [r3, #12]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	b29b      	uxth	r3, r3
 800170c:	6978      	ldr	r0, [r7, #20]
 800170e:	f002 faeb 	bl	8003ce8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	441a      	add	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	441a      	add	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	015a      	lsls	r2, r3, #5
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4413      	add	r3, r2
 8001732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	b29b      	uxth	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	429a      	cmp	r2, r3
 800173e:	d809      	bhi.n	8001754 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	699a      	ldr	r2, [r3, #24]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001748:	429a      	cmp	r2, r3
 800174a:	d203      	bcs.n	8001754 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1c3      	bne.n	80016dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	429a      	cmp	r2, r3
 800175e:	d811      	bhi.n	8001784 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	2201      	movs	r2, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	43db      	mvns	r3, r3
 800177a:	6939      	ldr	r1, [r7, #16]
 800177c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001780:	4013      	ands	r3, r2
 8001782:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	333c      	adds	r3, #60	; 0x3c
 80017a8:	3304      	adds	r3, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <PCD_EP_OutXfrComplete_int+0x98>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d124      	bne.n	8001810 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00a      	beq.n	80017e6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017dc:	461a      	mov	r2, r3
 80017de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017e2:	6093      	str	r3, [r2, #8]
 80017e4:	e01a      	b.n	800181c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f003 0320 	and.w	r3, r3, #32
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fc:	461a      	mov	r2, r3
 80017fe:	2320      	movs	r3, #32
 8001800:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	4619      	mov	r1, r3
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f004 faf7 	bl	8005dfc <HAL_PCD_DataOutStageCallback>
 800180e:	e005      	b.n	800181c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4619      	mov	r1, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f004 faf0 	bl	8005dfc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	4f54310a 	.word	0x4f54310a

0800182c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	333c      	adds	r3, #60	; 0x3c
 8001844:	3304      	adds	r3, #4
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4413      	add	r3, r2
 8001852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	60bb      	str	r3, [r7, #8]


  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <PCD_EP_OutSetupPacket_int+0x64>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d10e      	bne.n	8001880 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	015a      	lsls	r2, r3, #5
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4413      	add	r3, r2
 8001874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001878:	461a      	mov	r2, r3
 800187a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800187e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f004 faa9 	bl	8005dd8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	4f54310a 	.word	0x4f54310a

08001894 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	70fb      	strb	r3, [r7, #3]
 80018a0:	4613      	mov	r3, r2
 80018a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d107      	bne.n	80018c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80018b2:	883b      	ldrh	r3, [r7, #0]
 80018b4:	0419      	lsls	r1, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	430a      	orrs	r2, r1
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
 80018c0:	e028      	b.n	8001914 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	4413      	add	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e00d      	b.n	80018f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	3340      	adds	r3, #64	; 0x40
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	4413      	add	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	3301      	adds	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d3ec      	bcc.n	80018d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80018fc:	883b      	ldrh	r3, [r7, #0]
 80018fe:	0418      	lsls	r0, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6819      	ldr	r1, [r3, #0]
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	3b01      	subs	r3, #1
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	4302      	orrs	r2, r0
 800190c:	3340      	adds	r3, #64	; 0x40
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001976:	f043 0303 	orr.w	r3, r3, #3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40007000 	.word	0x40007000

080019a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b6:	d130      	bne.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b8:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c4:	d038      	beq.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ce:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2232      	movs	r2, #50	; 0x32
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0c9b      	lsrs	r3, r3, #18
 80019e8:	3301      	adds	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ec:	e002      	b.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a00:	d102      	bne.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f2      	bne.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a14:	d110      	bne.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e00f      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a26:	d007      	beq.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a30:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	200000dc 	.word	0x200000dc
 8001a50:	431bde83 	.word	0x431bde83

08001a54 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a62:	6053      	str	r3, [r2, #4]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40007000 	.word	0x40007000

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e39d      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a86:	4ba4      	ldr	r3, [pc, #656]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a90:	4ba1      	ldr	r3, [pc, #644]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80e1 	beq.w	8001c6a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_RCC_OscConfig+0x4a>
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	f040 8088 	bne.w	8001bc6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 8084 	bne.w	8001bc6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001abe:	4b96      	ldr	r3, [pc, #600]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x62>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e375      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	4b8f      	ldr	r3, [pc, #572]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <HAL_RCC_OscConfig+0x7c>
 8001ae6:	4b8c      	ldr	r3, [pc, #560]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aee:	e005      	b.n	8001afc <HAL_RCC_OscConfig+0x88>
 8001af0:	4b89      	ldr	r3, [pc, #548]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d223      	bcs.n	8001b48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fcdd 	bl	80024c4 <RCC_SetFlashLatencyFromMSIRange>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e356      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b14:	4b80      	ldr	r3, [pc, #512]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a7f      	ldr	r2, [pc, #508]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b7d      	ldr	r3, [pc, #500]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	497a      	ldr	r1, [pc, #488]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b32:	4b79      	ldr	r3, [pc, #484]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	4975      	ldr	r1, [pc, #468]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
 8001b46:	e022      	b.n	8001b8e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b48:	4b73      	ldr	r3, [pc, #460]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a72      	ldr	r2, [pc, #456]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b70      	ldr	r3, [pc, #448]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	496d      	ldr	r1, [pc, #436]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b66:	4b6c      	ldr	r3, [pc, #432]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	4968      	ldr	r1, [pc, #416]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fca0 	bl	80024c4 <RCC_SetFlashLatencyFromMSIRange>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e319      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b8e:	f000 fc03 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8001b92:	4601      	mov	r1, r0
 8001b94:	4b60      	ldr	r3, [pc, #384]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	4a5f      	ldr	r2, [pc, #380]	; (8001d1c <HAL_RCC_OscConfig+0x2a8>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	fa21 f303 	lsr.w	r3, r1, r3
 8001baa:	4a5d      	ldr	r2, [pc, #372]	; (8001d20 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_RCC_OscConfig+0x2b0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fb20 	bl	80001f8 <HAL_InitTick>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d052      	beq.n	8001c68 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	e2fd      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d032      	beq.n	8001c34 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bce:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bda:	f7fe fb59 	bl	8000290 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be2:	f7fe fb55 	bl	8000290 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e2e6      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf4:	4b48      	ldr	r3, [pc, #288]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c00:	4b45      	ldr	r3, [pc, #276]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a44      	ldr	r2, [pc, #272]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c06:	f043 0308 	orr.w	r3, r3, #8
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	493f      	ldr	r1, [pc, #252]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	493a      	ldr	r1, [pc, #232]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
 8001c32:	e01a      	b.n	8001c6a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c34:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a37      	ldr	r2, [pc, #220]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c40:	f7fe fb26 	bl	8000290 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c48:	f7fe fb22 	bl	8000290 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e2b3      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1d4>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d074      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_OscConfig+0x214>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d10e      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d10b      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d064      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2ea>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d160      	bne.n	8001d5e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e290      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x244>
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1a      	ldr	r2, [pc, #104]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e01d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x280>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x268>
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x280>
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_RCC_OscConfig+0x2a4>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01c      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fac8 	bl	8000290 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d02:	e011      	b.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7fe fac4 	bl	8000290 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d90a      	bls.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e255      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	08006908 	.word	0x08006908
 8001d20:	200000dc 	.word	0x200000dc
 8001d24:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d28:	4bae      	ldr	r3, [pc, #696]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0e7      	beq.n	8001d04 <HAL_RCC_OscConfig+0x290>
 8001d34:	e014      	b.n	8001d60 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7fe faab 	bl	8000290 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3e:	f7fe faa7 	bl	8000290 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e238      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d50:	4ba4      	ldr	r3, [pc, #656]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2ca>
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d060      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x30a>
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	d119      	bne.n	8001dac <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d7e:	4b99      	ldr	r3, [pc, #612]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x322>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e215      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b93      	ldr	r3, [pc, #588]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	498f      	ldr	r1, [pc, #572]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001daa:	e040      	b.n	8001e2e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d023      	beq.n	8001dfc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a8a      	ldr	r2, [pc, #552]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fa66 	bl	8000290 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7fe fa62 	bl	8000290 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1f3      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dda:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	4b7f      	ldr	r3, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	061b      	lsls	r3, r3, #24
 8001df4:	497b      	ldr	r1, [pc, #492]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
 8001dfa:	e018      	b.n	8001e2e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfc:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a78      	ldr	r2, [pc, #480]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe fa42 	bl	8000290 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7fe fa3e 	bl	8000290 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1cf      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e22:	4b70      	ldr	r3, [pc, #448]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d03c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01c      	beq.n	8001e7c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	4a66      	ldr	r2, [pc, #408]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7fe fa1d 	bl	8000290 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7fe fa19 	bl	8000290 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1aa      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e6c:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0ef      	beq.n	8001e5a <HAL_RCC_OscConfig+0x3e6>
 8001e7a:	e01b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e82:	4a58      	ldr	r2, [pc, #352]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7fe fa00 	bl	8000290 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7fe f9fc 	bl	8000290 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e18d      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea6:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ef      	bne.n	8001e94 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80a5 	beq.w	800200c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10d      	bne.n	8001eee <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a43      	ldr	r2, [pc, #268]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ede:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eea:	2301      	movs	r3, #1
 8001eec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eee:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <HAL_RCC_OscConfig+0x574>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d118      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001efa:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_RCC_OscConfig+0x574>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <HAL_RCC_OscConfig+0x574>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f06:	f7fe f9c3 	bl	8000290 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7fe f9bf 	bl	8000290 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e150      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_RCC_OscConfig+0x574>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d108      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4d2>
 8001f34:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f44:	e024      	b.n	8001f90 <HAL_RCC_OscConfig+0x51c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b05      	cmp	r3, #5
 8001f4c:	d110      	bne.n	8001f70 <HAL_RCC_OscConfig+0x4fc>
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_OscConfig+0x51c>
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d016      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7fe f97a 	bl	8000290 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe f976 	bl	8000290 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e105      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_OscConfig+0x570>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0ed      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
 8001fc4:	e019      	b.n	8001ffa <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7fe f963 	bl	8000290 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fcc:	e00e      	b.n	8001fec <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe f95f 	bl	8000290 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d905      	bls.n	8001fec <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0ee      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fec:	4b77      	ldr	r3, [pc, #476]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e9      	bne.n	8001fce <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b72      	ldr	r3, [pc, #456]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	4a71      	ldr	r2, [pc, #452]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80d5 	beq.w	80021c0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	f000 808e 	beq.w	800213a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	2b02      	cmp	r3, #2
 8002024:	d15b      	bne.n	80020de <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b69      	ldr	r3, [pc, #420]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a68      	ldr	r2, [pc, #416]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 800202c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe f92d 	bl	8000290 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe f929 	bl	8000290 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0ba      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204c:	4b5f      	ldr	r3, [pc, #380]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002058:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <HAL_RCC_OscConfig+0x75c>)
 800205e:	4013      	ands	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002068:	3a01      	subs	r2, #1
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	4311      	orrs	r1, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002072:	0212      	lsls	r2, r2, #8
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800207a:	0852      	lsrs	r2, r2, #1
 800207c:	3a01      	subs	r2, #1
 800207e:	0552      	lsls	r2, r2, #21
 8002080:	4311      	orrs	r1, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002086:	0852      	lsrs	r2, r2, #1
 8002088:	3a01      	subs	r2, #1
 800208a:	0652      	lsls	r2, r2, #25
 800208c:	4311      	orrs	r1, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002092:	0912      	lsrs	r2, r2, #4
 8002094:	0452      	lsls	r2, r2, #17
 8002096:	430a      	orrs	r2, r1
 8002098:	494c      	ldr	r1, [pc, #304]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 800209a:	4313      	orrs	r3, r2
 800209c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209e:	4b4b      	ldr	r3, [pc, #300]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4a      	ldr	r2, [pc, #296]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020aa:	4b48      	ldr	r3, [pc, #288]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	4a47      	ldr	r2, [pc, #284]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe f8eb 	bl	8000290 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020be:	f7fe f8e7 	bl	8000290 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e078      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x64a>
 80020dc:	e070      	b.n	80021c0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020f6:	4b35      	ldr	r3, [pc, #212]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4a34      	ldr	r2, [pc, #208]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 80020fc:	f023 0303 	bic.w	r3, r3, #3
 8002100:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002102:	4b32      	ldr	r3, [pc, #200]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4a31      	ldr	r2, [pc, #196]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002108:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800210c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002110:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7fe f8bd 	bl	8000290 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe f8b9 	bl	8000290 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e04a      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0x6a6>
 8002138:	e042      	b.n	80021c0 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e03d      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCC_OscConfig+0x758>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 0203 	and.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	429a      	cmp	r2, r3
 8002158:	d130      	bne.n	80021bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	3b01      	subs	r3, #1
 8002166:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d127      	bne.n	80021bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d11f      	bne.n	80021bc <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002186:	2a07      	cmp	r2, #7
 8002188:	bf14      	ite	ne
 800218a:	2201      	movne	r2, #1
 800218c:	2200      	moveq	r2, #0
 800218e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002190:	4293      	cmp	r3, r2
 8002192:	d113      	bne.n	80021bc <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	3b01      	subs	r3, #1
 80021a2:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d109      	bne.n	80021bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	085b      	lsrs	r3, r3, #1
 80021b4:	3b01      	subs	r3, #1
 80021b6:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	f99d808c 	.word	0xf99d808c

080021d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0c8      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d910      	bls.n	8002218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4961      	ldr	r1, [pc, #388]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0b0      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d04c      	beq.n	80022be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d107      	bne.n	800223c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222c:	4b56      	ldr	r3, [pc, #344]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d121      	bne.n	800227c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e09e      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d107      	bne.n	8002254 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d115      	bne.n	800227c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e092      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800225c:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d109      	bne.n	800227c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e086      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226c:	4b46      	ldr	r3, [pc, #280]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e07e      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800227c:	4b42      	ldr	r3, [pc, #264]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 0203 	bic.w	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	493f      	ldr	r1, [pc, #252]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228e:	f7fd ffff 	bl	8000290 <HAL_GetTick>
 8002292:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002294:	e00a      	b.n	80022ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002296:	f7fd fffb 	bl	8000290 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e066      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ac:	4b36      	ldr	r3, [pc, #216]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 020c 	and.w	r2, r3, #12
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d1eb      	bne.n	8002296 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ca:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	492c      	ldr	r1, [pc, #176]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d210      	bcs.n	800230c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0207 	bic.w	r2, r3, #7
 80022f2:	4924      	ldr	r1, [pc, #144]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_ClockConfig+0x1b0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e036      	b.n	800237a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4918      	ldr	r1, [pc, #96]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4910      	ldr	r1, [pc, #64]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800234a:	f000 f825 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 800234e:	4601      	mov	r1, r0
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCC_ClockConfig+0x1b4>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	fa21 f303 	lsr.w	r3, r1, r3
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fd ff42 	bl	80001f8 <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
 8002376:	72fb      	strb	r3, [r7, #11]

  return status;
 8002378:	7afb      	ldrb	r3, [r7, #11]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40022000 	.word	0x40022000
 8002388:	40021000 	.word	0x40021000
 800238c:	08006908 	.word	0x08006908
 8002390:	200000dc 	.word	0x200000dc
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b0:	4b3a      	ldr	r3, [pc, #232]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x34>
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d121      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d11e      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023cc:	4b33      	ldr	r3, [pc, #204]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023d8:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023f4:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d102      	bne.n	8002416 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	e004      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d101      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800241e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d133      	bne.n	800248e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0xa4>
 8002436:	2b03      	cmp	r3, #3
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0xaa>
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800243e:	617b      	str	r3, [r7, #20]
      break;
 8002440:	e005      	b.n	800244e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002444:	617b      	str	r3, [r7, #20]
      break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	617b      	str	r3, [r7, #20]
      break;
 800244c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	3301      	adds	r3, #1
 800245a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	fb02 f203 	mul.w	r2, r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_RCC_GetSysClockFreq+0x104>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0e5b      	lsrs	r3, r3, #25
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	3301      	adds	r3, #1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800248e:	69bb      	ldr	r3, [r7, #24]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3724      	adds	r7, #36	; 0x24
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40021000 	.word	0x40021000
 80024a0:	08006918 	.word	0x08006918
 80024a4:	00f42400 	.word	0x00f42400
 80024a8:	007a1200 	.word	0x007a1200

080024ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	200000dc 	.word	0x200000dc

080024c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024dc:	f7ff fa56 	bl	800198c <HAL_PWREx_GetVoltageRange>
 80024e0:	6178      	str	r0, [r7, #20]
 80024e2:	e014      	b.n	800250e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	4a24      	ldr	r2, [pc, #144]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6593      	str	r3, [r2, #88]	; 0x58
 80024f0:	4b22      	ldr	r3, [pc, #136]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024fc:	f7ff fa46 	bl	800198c <HAL_PWREx_GetVoltageRange>
 8002500:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	4a1d      	ldr	r2, [pc, #116]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002514:	d10b      	bne.n	800252e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d919      	bls.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2ba0      	cmp	r3, #160	; 0xa0
 8002520:	d902      	bls.n	8002528 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002522:	2302      	movs	r3, #2
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	e013      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002528:	2301      	movs	r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	e010      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b80      	cmp	r3, #128	; 0x80
 8002532:	d902      	bls.n	800253a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002534:	2303      	movs	r3, #3
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	e00a      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d102      	bne.n	8002546 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002540:	2302      	movs	r3, #2
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	e004      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b70      	cmp	r3, #112	; 0x70
 800254a:	d101      	bne.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800254c:	2301      	movs	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 0207 	bic.w	r2, r3, #7
 8002558:	4909      	ldr	r1, [pc, #36]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	40022000 	.word	0x40022000

08002584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800258c:	2300      	movs	r3, #0
 800258e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002590:	2300      	movs	r3, #0
 8002592:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259c:	2b00      	cmp	r3, #0
 800259e:	d03f      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a8:	d01c      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80025aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ae:	d802      	bhi.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00e      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80025b4:	e01f      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80025b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025ba:	d003      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80025bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025c0:	d01c      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80025c2:	e018      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c4:	4b85      	ldr	r3, [pc, #532]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a84      	ldr	r2, [pc, #528]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d0:	e015      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fab9 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 80025de:	4603      	mov	r3, r0
 80025e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025e2:	e00c      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3320      	adds	r3, #32
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fba0 	bl	8002d30 <RCCEx_PLLSAI2_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025f4:	e003      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	74fb      	strb	r3, [r7, #19]
      break;
 80025fa:	e000      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80025fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002604:	4b75      	ldr	r3, [pc, #468]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002612:	4972      	ldr	r1, [pc, #456]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800261a:	e001      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d03f      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002634:	d01c      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002636:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800263a:	d802      	bhi.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00e      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002640:	e01f      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002646:	d003      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002648:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800264c:	d01c      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800264e:	e018      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002650:	4b62      	ldr	r3, [pc, #392]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a61      	ldr	r2, [pc, #388]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800265c:	e015      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3304      	adds	r3, #4
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fa73 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 800266a:	4603      	mov	r3, r0
 800266c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800266e:	e00c      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3320      	adds	r3, #32
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fb5a 	bl	8002d30 <RCCEx_PLLSAI2_Config>
 800267c:	4603      	mov	r3, r0
 800267e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002680:	e003      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	74fb      	strb	r3, [r7, #19]
      break;
 8002686:	e000      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002690:	4b52      	ldr	r3, [pc, #328]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800269e:	494f      	ldr	r1, [pc, #316]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026a6:	e001      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80a0 	beq.w	80027fa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00d      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d4:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4a40      	ldr	r2, [pc, #256]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026de:	6593      	str	r3, [r2, #88]	; 0x58
 80026e0:	4b3e      	ldr	r3, [pc, #248]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ec:	2301      	movs	r3, #1
 80026ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f0:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a3a      	ldr	r2, [pc, #232]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026fc:	f7fd fdc8 	bl	8000290 <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002702:	e009      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002704:	f7fd fdc4 	bl	8000290 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d902      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	74fb      	strb	r3, [r7, #19]
        break;
 8002716:	e005      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ef      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d15c      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002734:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01f      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	429a      	cmp	r2, r3
 8002746:	d019      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002752:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	4a20      	ldr	r2, [pc, #128]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800276c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d016      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fd fd83 	bl	8000290 <HAL_GetTick>
 800278a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278c:	e00b      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fd fd7f 	bl	8000290 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d902      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	74fb      	strb	r3, [r7, #19]
            break;
 80027a4:	e006      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ec      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ca:	4904      	ldr	r1, [pc, #16]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027d2:	e009      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	74bb      	strb	r3, [r7, #18]
 80027d8:	e006      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027e8:	7c7b      	ldrb	r3, [r7, #17]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d105      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ee:	4b9e      	ldr	r3, [pc, #632]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	4a9d      	ldr	r2, [pc, #628]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002806:	4b98      	ldr	r3, [pc, #608]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f023 0203 	bic.w	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	4994      	ldr	r1, [pc, #592]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002828:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f023 020c 	bic.w	r2, r3, #12
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	498c      	ldr	r1, [pc, #560]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800284a:	4b87      	ldr	r3, [pc, #540]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	4983      	ldr	r1, [pc, #524]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800286c:	4b7e      	ldr	r3, [pc, #504]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	497b      	ldr	r1, [pc, #492]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800288e:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289c:	4972      	ldr	r1, [pc, #456]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028b0:	4b6d      	ldr	r3, [pc, #436]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	496a      	ldr	r1, [pc, #424]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028d2:	4b65      	ldr	r3, [pc, #404]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	4961      	ldr	r1, [pc, #388]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028f4:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002902:	4959      	ldr	r1, [pc, #356]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002916:	4b54      	ldr	r3, [pc, #336]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002924:	4950      	ldr	r1, [pc, #320]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	4948      	ldr	r1, [pc, #288]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800295a:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	493f      	ldr	r1, [pc, #252]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d028      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298a:	4937      	ldr	r1, [pc, #220]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299a:	d106      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299c:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a31      	ldr	r2, [pc, #196]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a6:	60d3      	str	r3, [r2, #12]
 80029a8:	e011      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b2:	d10c      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3304      	adds	r3, #4
 80029b8:	2101      	movs	r1, #1
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f8c8 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d028      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	491f      	ldr	r1, [pc, #124]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f8:	d106      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a04:	60d3      	str	r3, [r2, #12]
 8002a06:	e011      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2101      	movs	r1, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f899 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d02b      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a56:	d109      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a02      	ldr	r2, [pc, #8]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a62:	60d3      	str	r3, [r2, #12]
 8002a64:	e014      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f867 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 8002a82:	4603      	mov	r3, r0
 8002a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d02f      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aaa:	4928      	ldr	r1, [pc, #160]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f844 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d014      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	74bb      	strb	r3, [r7, #18]
 8002ad6:	e011      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3320      	adds	r3, #32
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 f921 	bl	8002d30 <RCCEx_PLLSAI2_Config>
 8002aee:	4603      	mov	r3, r0
 8002af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af2:	7cfb      	ldrb	r3, [r7, #19]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b16:	490d      	ldr	r1, [pc, #52]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3a:	4904      	ldr	r1, [pc, #16]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b42:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000

08002b50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b5e:	4b73      	ldr	r3, [pc, #460]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d018      	beq.n	8002b9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b6a:	4b70      	ldr	r3, [pc, #448]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0203 	and.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d10d      	bne.n	8002b96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b82:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
       ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d044      	beq.n	8002c20 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	e041      	b.n	8002c20 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d00c      	beq.n	8002bbe <RCCEx_PLLSAI1_Config+0x6e>
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d013      	beq.n	8002bd0 <RCCEx_PLLSAI1_Config+0x80>
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d120      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bac:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d11d      	bne.n	8002bf4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbc:	e01a      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bbe:	4b5b      	ldr	r3, [pc, #364]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bce:	e013      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bd0:	4b56      	ldr	r3, [pc, #344]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10f      	bne.n	8002bfc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bdc:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d109      	bne.n	8002bfc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bec:	e006      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf2:	e004      	b.n	8002bfe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bf4:	bf00      	nop
 8002bf6:	e002      	b.n	8002bfe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bf8:	bf00      	nop
 8002bfa:	e000      	b.n	8002bfe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bfc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10d      	bne.n	8002c20 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c04:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	4944      	ldr	r1, [pc, #272]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d17d      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a40      	ldr	r2, [pc, #256]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c32:	f7fd fb2d 	bl	8000290 <HAL_GetTick>
 8002c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c38:	e009      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c3a:	f7fd fb29 	bl	8000290 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d902      	bls.n	8002c4e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	73fb      	strb	r3, [r7, #15]
        break;
 8002c4c:	e005      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c4e:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ef      	bne.n	8002c3a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d160      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d111      	bne.n	8002c8a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c66:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6892      	ldr	r2, [r2, #8]
 8002c76:	0211      	lsls	r1, r2, #8
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68d2      	ldr	r2, [r2, #12]
 8002c7c:	0912      	lsrs	r2, r2, #4
 8002c7e:	0452      	lsls	r2, r2, #17
 8002c80:	430a      	orrs	r2, r1
 8002c82:	492a      	ldr	r1, [pc, #168]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	610b      	str	r3, [r1, #16]
 8002c88:	e027      	b.n	8002cda <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d112      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6892      	ldr	r2, [r2, #8]
 8002ca0:	0211      	lsls	r1, r2, #8
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6912      	ldr	r2, [r2, #16]
 8002ca6:	0852      	lsrs	r2, r2, #1
 8002ca8:	3a01      	subs	r2, #1
 8002caa:	0552      	lsls	r2, r2, #21
 8002cac:	430a      	orrs	r2, r1
 8002cae:	491f      	ldr	r1, [pc, #124]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	610b      	str	r3, [r1, #16]
 8002cb4:	e011      	b.n	8002cda <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	0211      	lsls	r1, r2, #8
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6952      	ldr	r2, [r2, #20]
 8002ccc:	0852      	lsrs	r2, r2, #1
 8002cce:	3a01      	subs	r2, #1
 8002cd0:	0652      	lsls	r2, r2, #25
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	4915      	ldr	r1, [pc, #84]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7fd fad3 	bl	8000290 <HAL_GetTick>
 8002cea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cec:	e009      	b.n	8002d02 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cee:	f7fd facf 	bl	8000290 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d902      	bls.n	8002d02 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	73fb      	strb	r3, [r7, #15]
          break;
 8002d00:	e005      	b.n	8002d0e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ef      	beq.n	8002cee <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000

08002d30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d3e:	4b68      	ldr	r3, [pc, #416]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d018      	beq.n	8002d7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d4a:	4b65      	ldr	r3, [pc, #404]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0203 	and.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d10d      	bne.n	8002d76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d62:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
       ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d044      	beq.n	8002e00 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	e041      	b.n	8002e00 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d00c      	beq.n	8002d9e <RCCEx_PLLSAI2_Config+0x6e>
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d013      	beq.n	8002db0 <RCCEx_PLLSAI2_Config+0x80>
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d120      	bne.n	8002dce <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d8c:	4b54      	ldr	r3, [pc, #336]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11d      	bne.n	8002dd4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9c:	e01a      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d9e:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dae:	e013      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002db0:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10f      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dbc:	4b48      	ldr	r3, [pc, #288]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dcc:	e006      	b.n	8002ddc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd2:	e004      	b.n	8002dde <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002dd4:	bf00      	nop
 8002dd6:	e002      	b.n	8002dde <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002dd8:	bf00      	nop
 8002dda:	e000      	b.n	8002dde <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ddc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10d      	bne.n	8002e00 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002de4:	4b3e      	ldr	r3, [pc, #248]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6819      	ldr	r1, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	4939      	ldr	r1, [pc, #228]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d167      	bne.n	8002ed6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e06:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a35      	ldr	r2, [pc, #212]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e12:	f7fd fa3d 	bl	8000290 <HAL_GetTick>
 8002e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e18:	e009      	b.n	8002e2e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e1a:	f7fd fa39 	bl	8000290 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d902      	bls.n	8002e2e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	73fb      	strb	r3, [r7, #15]
        break;
 8002e2c:	e005      	b.n	8002e3a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ef      	bne.n	8002e1a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d14a      	bne.n	8002ed6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d111      	bne.n	8002e6a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e46:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6892      	ldr	r2, [r2, #8]
 8002e56:	0211      	lsls	r1, r2, #8
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68d2      	ldr	r2, [r2, #12]
 8002e5c:	0912      	lsrs	r2, r2, #4
 8002e5e:	0452      	lsls	r2, r2, #17
 8002e60:	430a      	orrs	r2, r1
 8002e62:	491f      	ldr	r1, [pc, #124]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	614b      	str	r3, [r1, #20]
 8002e68:	e011      	b.n	8002e8e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6892      	ldr	r2, [r2, #8]
 8002e7a:	0211      	lsls	r1, r2, #8
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6912      	ldr	r2, [r2, #16]
 8002e80:	0852      	lsrs	r2, r2, #1
 8002e82:	3a01      	subs	r2, #1
 8002e84:	0652      	lsls	r2, r2, #25
 8002e86:	430a      	orrs	r2, r1
 8002e88:	4915      	ldr	r1, [pc, #84]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fd f9f9 	bl	8000290 <HAL_GetTick>
 8002e9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ea0:	e009      	b.n	8002eb6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ea2:	f7fd f9f5 	bl	8000290 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d902      	bls.n	8002eb6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	73fb      	strb	r3, [r7, #15]
          break;
 8002eb4:	e005      	b.n	8002ec2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ef      	beq.n	8002ea2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	4903      	ldr	r1, [pc, #12]	; (8002ee0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	f107 001c 	add.w	r0, r7, #28
 8002ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d122      	bne.n	8002f42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f001 f978 	bl	800422c <USB_CoreReset>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e01a      	b.n	8002f78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f001 f96c 	bl	800422c <USB_CoreReset>
 8002f54:	4603      	mov	r3, r0
 8002f56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
 8002f6a:	e005      	b.n	8002f78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f84:	b004      	add	sp, #16
 8002f86:	4770      	bx	lr

08002f88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	4613      	mov	r3, r2
 8002f94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d165      	bne.n	8003068 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4a3e      	ldr	r2, [pc, #248]	; (8003098 <USB_SetTurnaroundTime+0x110>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d906      	bls.n	8002fb2 <USB_SetTurnaroundTime+0x2a>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4a3d      	ldr	r2, [pc, #244]	; (800309c <USB_SetTurnaroundTime+0x114>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d802      	bhi.n	8002fb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002fac:	230f      	movs	r3, #15
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e05c      	b.n	800306c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4a39      	ldr	r2, [pc, #228]	; (800309c <USB_SetTurnaroundTime+0x114>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d906      	bls.n	8002fc8 <USB_SetTurnaroundTime+0x40>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4a38      	ldr	r2, [pc, #224]	; (80030a0 <USB_SetTurnaroundTime+0x118>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d802      	bhi.n	8002fc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002fc2:	230e      	movs	r3, #14
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e051      	b.n	800306c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4a35      	ldr	r2, [pc, #212]	; (80030a0 <USB_SetTurnaroundTime+0x118>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d906      	bls.n	8002fde <USB_SetTurnaroundTime+0x56>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4a34      	ldr	r2, [pc, #208]	; (80030a4 <USB_SetTurnaroundTime+0x11c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d802      	bhi.n	8002fde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002fd8:	230d      	movs	r3, #13
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e046      	b.n	800306c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4a30      	ldr	r2, [pc, #192]	; (80030a4 <USB_SetTurnaroundTime+0x11c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d906      	bls.n	8002ff4 <USB_SetTurnaroundTime+0x6c>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <USB_SetTurnaroundTime+0x120>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d802      	bhi.n	8002ff4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002fee:	230c      	movs	r3, #12
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e03b      	b.n	800306c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4a2c      	ldr	r2, [pc, #176]	; (80030a8 <USB_SetTurnaroundTime+0x120>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d906      	bls.n	800300a <USB_SetTurnaroundTime+0x82>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4a2b      	ldr	r2, [pc, #172]	; (80030ac <USB_SetTurnaroundTime+0x124>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d802      	bhi.n	800300a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003004:	230b      	movs	r3, #11
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e030      	b.n	800306c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4a27      	ldr	r2, [pc, #156]	; (80030ac <USB_SetTurnaroundTime+0x124>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d906      	bls.n	8003020 <USB_SetTurnaroundTime+0x98>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4a26      	ldr	r2, [pc, #152]	; (80030b0 <USB_SetTurnaroundTime+0x128>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d802      	bhi.n	8003020 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800301a:	230a      	movs	r3, #10
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e025      	b.n	800306c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <USB_SetTurnaroundTime+0x128>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d906      	bls.n	8003036 <USB_SetTurnaroundTime+0xae>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4a22      	ldr	r2, [pc, #136]	; (80030b4 <USB_SetTurnaroundTime+0x12c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d802      	bhi.n	8003036 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003030:	2309      	movs	r3, #9
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e01a      	b.n	800306c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <USB_SetTurnaroundTime+0x12c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d906      	bls.n	800304c <USB_SetTurnaroundTime+0xc4>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <USB_SetTurnaroundTime+0x130>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d802      	bhi.n	800304c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003046:	2308      	movs	r3, #8
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e00f      	b.n	800306c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <USB_SetTurnaroundTime+0x130>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d906      	bls.n	8003062 <USB_SetTurnaroundTime+0xda>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4a19      	ldr	r2, [pc, #100]	; (80030bc <USB_SetTurnaroundTime+0x134>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d802      	bhi.n	8003062 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800305c:	2307      	movs	r3, #7
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e004      	b.n	800306c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003062:	2306      	movs	r3, #6
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e001      	b.n	800306c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003068:	2309      	movs	r3, #9
 800306a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	029b      	lsls	r3, r3, #10
 8003080:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003084:	431a      	orrs	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	00d8acbf 	.word	0x00d8acbf
 800309c:	00e4e1bf 	.word	0x00e4e1bf
 80030a0:	00f423ff 	.word	0x00f423ff
 80030a4:	0106737f 	.word	0x0106737f
 80030a8:	011a499f 	.word	0x011a499f
 80030ac:	01312cff 	.word	0x01312cff
 80030b0:	014ca43f 	.word	0x014ca43f
 80030b4:	016e35ff 	.word	0x016e35ff
 80030b8:	01a6ab1f 	.word	0x01a6ab1f
 80030bc:	01e847ff 	.word	0x01e847ff

080030c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f043 0201 	orr.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f023 0201 	bic.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d106      	bne.n	8003130 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	e00b      	b.n	8003148 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	e001      	b.n	8003148 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e003      	b.n	8003150 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003148:	2032      	movs	r0, #50	; 0x32
 800314a:	f7fd f8ad 	bl	80002a8 <HAL_Delay>

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003158:	b084      	sub	sp, #16
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	e009      	b.n	800318c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	3340      	adds	r3, #64	; 0x40
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	2200      	movs	r2, #0
 8003184:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	3301      	adds	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b0e      	cmp	r3, #14
 8003190:	d9f2      	bls.n	8003178 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d112      	bne.n	80031be <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e005      	b.n	80031ca <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031d0:	461a      	mov	r2, r3
 80031d2:	2300      	movs	r3, #0
 80031d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031dc:	4619      	mov	r1, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e4:	461a      	mov	r2, r3
 80031e6:	680b      	ldr	r3, [r1, #0]
 80031e8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031ea:	2103      	movs	r1, #3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f93d 	bl	800346c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031f2:	2110      	movs	r1, #16
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f8f1 	bl	80033dc <USB_FlushTxFifo>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f90f 	bl	8003428 <USB_FlushRxFifo>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321a:	461a      	mov	r2, r3
 800321c:	2300      	movs	r3, #0
 800321e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003226:	461a      	mov	r2, r3
 8003228:	2300      	movs	r3, #0
 800322a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003232:	461a      	mov	r2, r3
 8003234:	2300      	movs	r3, #0
 8003236:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e043      	b.n	80032c6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003254:	d118      	bne.n	8003288 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	461a      	mov	r2, r3
 800326a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	e013      	b.n	800329a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327e:	461a      	mov	r2, r3
 8003280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e008      	b.n	800329a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003294:	461a      	mov	r2, r3
 8003296:	2300      	movs	r3, #0
 8003298:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a6:	461a      	mov	r2, r3
 80032a8:	2300      	movs	r3, #0
 80032aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b8:	461a      	mov	r2, r3
 80032ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	3301      	adds	r3, #1
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d3b7      	bcc.n	800323e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	e043      	b.n	800335c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032ea:	d118      	bne.n	800331e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	461a      	mov	r2, r3
 8003300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e013      	b.n	8003330 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003314:	461a      	mov	r2, r3
 8003316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e008      	b.n	8003330 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332a:	461a      	mov	r2, r3
 800332c:	2300      	movs	r3, #0
 800332e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333c:	461a      	mov	r2, r3
 800333e:	2300      	movs	r3, #0
 8003340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334e:	461a      	mov	r2, r3
 8003350:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	3301      	adds	r3, #1
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	429a      	cmp	r2, r3
 8003362:	d3b7      	bcc.n	80032d4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003376:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003384:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f043 0210 	orr.w	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <USB_DevInit+0x280>)
 8003398:	4313      	orrs	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f043 0208 	orr.w	r2, r3, #8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d107      	bne.n	80033c6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033d2:	b004      	add	sp, #16
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	803c3800 	.word	0x803c3800

080033dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	019b      	lsls	r3, r3, #6
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3301      	adds	r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <USB_FlushTxFifo+0x48>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e006      	b.n	8003416 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b20      	cmp	r3, #32
 8003412:	d0f0      	beq.n	80033f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	00030d40 	.word	0x00030d40

08003428 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2210      	movs	r2, #16
 8003438:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <USB_FlushRxFifo+0x40>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e006      	b.n	800345a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d0f0      	beq.n	800343a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	00030d40 	.word	0x00030d40

0800346c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800348c:	4313      	orrs	r3, r2
 800348e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800349e:	b480      	push	{r7}
 80034a0:	b087      	sub	sp, #28
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0306 	and.w	r3, r3, #6
 80034b6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d002      	beq.n	80034c4 <USB_GetDevSpeed+0x26>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d102      	bne.n	80034ca <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80034c4:	2302      	movs	r3, #2
 80034c6:	75fb      	strb	r3, [r7, #23]
 80034c8:	e001      	b.n	80034ce <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80034ca:	230f      	movs	r3, #15
 80034cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	785b      	ldrb	r3, [r3, #1]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d13a      	bne.n	800356e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	2101      	movs	r1, #1
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	b29b      	uxth	r3, r3
 8003510:	68f9      	ldr	r1, [r7, #12]
 8003512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003516:	4313      	orrs	r3, r2
 8003518:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d155      	bne.n	80035dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	78db      	ldrb	r3, [r3, #3]
 800354a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800354c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	059b      	lsls	r3, r3, #22
 8003552:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003554:	4313      	orrs	r3, r2
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	0151      	lsls	r1, r2, #5
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	440a      	add	r2, r1
 800355e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	e036      	b.n	80035dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800358c:	4313      	orrs	r3, r2
 800358e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11a      	bne.n	80035dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	78db      	ldrb	r3, [r3, #3]
 80035c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035c2:	430b      	orrs	r3, r1
 80035c4:	4313      	orrs	r3, r2
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	785b      	ldrb	r3, [r3, #1]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d135      	bne.n	8003674 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	b29b      	uxth	r3, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	68f9      	ldr	r1, [r7, #12]
 8003624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003628:	4013      	ands	r3, r2
 800362a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	b29b      	uxth	r3, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	68f9      	ldr	r1, [r7, #12]
 8003648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800364c:	4013      	ands	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	0159      	lsls	r1, r3, #5
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	440b      	add	r3, r1
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	4619      	mov	r1, r3
 800366c:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <USB_DeactivateEndpoint+0x100>)
 800366e:	4013      	ands	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
 8003672:	e034      	b.n	80036de <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	2101      	movs	r1, #1
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	43db      	mvns	r3, r3
 800368e:	68f9      	ldr	r1, [r7, #12]
 8003690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003694:	4013      	ands	r3, r2
 8003696:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	2101      	movs	r1, #1
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	43db      	mvns	r3, r3
 80036b2:	68f9      	ldr	r1, [r7, #12]
 80036b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036b8:	4013      	ands	r3, r2
 80036ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	0159      	lsls	r1, r3, #5
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	440b      	add	r3, r1
 80036d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d6:	4619      	mov	r1, r3
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <USB_DeactivateEndpoint+0x104>)
 80036da:	4013      	ands	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	ec337800 	.word	0xec337800
 80036f0:	eff37800 	.word	0xeff37800

080036f4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	785b      	ldrb	r3, [r3, #1]
 800370c:	2b01      	cmp	r3, #1
 800370e:	f040 810a 	bne.w	8003926 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d132      	bne.n	8003780 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	0151      	lsls	r1, r2, #5
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	440a      	add	r2, r1
 8003730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003734:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003738:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800373c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	0151      	lsls	r1, r2, #5
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	440a      	add	r2, r1
 8003754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800375c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	0151      	lsls	r1, r2, #5
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	440a      	add	r2, r1
 8003774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003778:	0cdb      	lsrs	r3, r3, #19
 800377a:	04db      	lsls	r3, r3, #19
 800377c:	6113      	str	r3, [r2, #16]
 800377e:	e074      	b.n	800386a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	0151      	lsls	r1, r2, #5
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	440a      	add	r2, r1
 8003796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800379a:	0cdb      	lsrs	r3, r3, #19
 800379c:	04db      	lsls	r3, r3, #19
 800379e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	0151      	lsls	r1, r2, #5
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	440a      	add	r2, r1
 80037b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6959      	ldr	r1, [r3, #20]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	440b      	add	r3, r1
 80037dc:	1e59      	subs	r1, r3, #1
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e6:	04d9      	lsls	r1, r3, #19
 80037e8:	4baf      	ldr	r3, [pc, #700]	; (8003aa8 <USB_EPStartXfer+0x3b4>)
 80037ea:	400b      	ands	r3, r1
 80037ec:	6939      	ldr	r1, [r7, #16]
 80037ee:	0148      	lsls	r0, r1, #5
 80037f0:	6979      	ldr	r1, [r7, #20]
 80037f2:	4401      	add	r1, r0
 80037f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037f8:	4313      	orrs	r3, r2
 80037fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003812:	6939      	ldr	r1, [r7, #16]
 8003814:	0148      	lsls	r0, r1, #5
 8003816:	6979      	ldr	r1, [r7, #20]
 8003818:	4401      	add	r1, r0
 800381a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800381e:	4313      	orrs	r3, r2
 8003820:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	78db      	ldrb	r3, [r3, #3]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d11f      	bne.n	800386a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	440a      	add	r2, r1
 8003840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003844:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003848:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003864:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003868:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	0151      	lsls	r1, r2, #5
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	440a      	add	r2, r1
 8003880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003888:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	78db      	ldrb	r3, [r3, #3]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d015      	beq.n	80038be <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8100 	beq.w	8003a9c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	6979      	ldr	r1, [r7, #20]
 80038b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038b8:	4313      	orrs	r3, r2
 80038ba:	634b      	str	r3, [r1, #52]	; 0x34
 80038bc:	e0ee      	b.n	8003a9c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d110      	bne.n	80038f0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	0151      	lsls	r1, r2, #5
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	440a      	add	r2, r1
 80038e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e00f      	b.n	8003910 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	0151      	lsls	r1, r2, #5
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	440a      	add	r2, r1
 8003906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800390a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68d9      	ldr	r1, [r3, #12]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	b29b      	uxth	r3, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9e2 	bl	8003ce8 <USB_WritePacket>
 8003924:	e0ba      	b.n	8003a9c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	0151      	lsls	r1, r2, #5
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	440a      	add	r2, r1
 800393c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003940:	0cdb      	lsrs	r3, r3, #19
 8003942:	04db      	lsls	r3, r3, #19
 8003944:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	0151      	lsls	r1, r2, #5
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	440a      	add	r2, r1
 800395c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003960:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003964:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003968:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d123      	bne.n	80039ba <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003988:	6939      	ldr	r1, [r7, #16]
 800398a:	0148      	lsls	r0, r1, #5
 800398c:	6979      	ldr	r1, [r7, #20]
 800398e:	4401      	add	r1, r0
 8003990:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003994:	4313      	orrs	r3, r2
 8003996:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039b6:	6113      	str	r3, [r2, #16]
 80039b8:	e033      	b.n	8003a22 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4413      	add	r3, r2
 80039c4:	1e5a      	subs	r2, r3, #1
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	89fb      	ldrh	r3, [r7, #14]
 80039e0:	04d9      	lsls	r1, r3, #19
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <USB_EPStartXfer+0x3b4>)
 80039e4:	400b      	ands	r3, r1
 80039e6:	6939      	ldr	r1, [r7, #16]
 80039e8:	0148      	lsls	r0, r1, #5
 80039ea:	6979      	ldr	r1, [r7, #20]
 80039ec:	4401      	add	r1, r0
 80039ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039f2:	4313      	orrs	r3, r2
 80039f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	89f9      	ldrh	r1, [r7, #14]
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a12:	6939      	ldr	r1, [r7, #16]
 8003a14:	0148      	lsls	r0, r1, #5
 8003a16:	6979      	ldr	r1, [r7, #20]
 8003a18:	4401      	add	r1, r0
 8003a1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	78db      	ldrb	r3, [r3, #3]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d128      	bne.n	8003a7c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d110      	bne.n	8003a5c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	0151      	lsls	r1, r2, #5
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	440a      	add	r2, r1
 8003a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e00f      	b.n	8003a7c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	1ff80000 	.word	0x1ff80000

08003aac <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	f040 80ab 	bne.w	8003c20 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d132      	bne.n	8003b38 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	0151      	lsls	r1, r2, #5
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	440a      	add	r2, r1
 8003ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003af0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003af4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	0151      	lsls	r1, r2, #5
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	440a      	add	r2, r1
 8003b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	0151      	lsls	r1, r2, #5
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	440a      	add	r2, r1
 8003b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b30:	0cdb      	lsrs	r3, r3, #19
 8003b32:	04db      	lsls	r3, r3, #19
 8003b34:	6113      	str	r3, [r2, #16]
 8003b36:	e04e      	b.n	8003bd6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b52:	0cdb      	lsrs	r3, r3, #19
 8003b54:	04db      	lsls	r3, r3, #19
 8003b56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d903      	bls.n	8003b90 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	0148      	lsls	r0, r1, #5
 8003bca:	68f9      	ldr	r1, [r7, #12]
 8003bcc:	4401      	add	r1, r0
 8003bce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	0151      	lsls	r1, r2, #5
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	440a      	add	r2, r1
 8003bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bf4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d06d      	beq.n	8003cda <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	2101      	movs	r1, #1
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	68f9      	ldr	r1, [r7, #12]
 8003c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	634b      	str	r3, [r1, #52]	; 0x34
 8003c1e:	e05c      	b.n	8003cda <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	0151      	lsls	r1, r2, #5
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	440a      	add	r2, r1
 8003c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c3a:	0cdb      	lsrs	r3, r3, #19
 8003c3c:	04db      	lsls	r3, r3, #19
 8003c3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	0151      	lsls	r1, r2, #5
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	440a      	add	r2, r1
 8003c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	0151      	lsls	r1, r2, #5
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	440a      	add	r2, r1
 8003c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	0148      	lsls	r0, r1, #5
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	4401      	add	r1, r0
 8003cb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	0151      	lsls	r1, r2, #5
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	440a      	add	r2, r1
 8003cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	71fb      	strb	r3, [r7, #7]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8003d06:	88bb      	ldrh	r3, [r7, #4]
 8003d08:	3303      	adds	r3, #3
 8003d0a:	089b      	lsrs	r3, r3, #2
 8003d0c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	e00f      	b.n	8003d34 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	031a      	lsls	r2, r3, #12
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d20:	461a      	mov	r2, r3
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6013      	str	r3, [r2, #0]
    pSrc++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	3301      	adds	r3, #1
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d3eb      	bcc.n	8003d14 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3724      	adds	r7, #36	; 0x24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b089      	sub	sp, #36	; 0x24
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	4613      	mov	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	3303      	adds	r3, #3
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	e00b      	b.n	8003d86 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d3ef      	bcc.n	8003d6e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003d8e:	69fb      	ldr	r3, [r7, #28]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3724      	adds	r7, #36	; 0x24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d12c      	bne.n	8003e12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	db12      	blt.n	8003df0 <USB_EPSetStall+0x54>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00f      	beq.n	8003df0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	0151      	lsls	r1, r2, #5
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	440a      	add	r2, r1
 8003de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	0151      	lsls	r1, r2, #5
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	440a      	add	r2, r1
 8003e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	e02b      	b.n	8003e6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	db12      	blt.n	8003e4a <USB_EPSetStall+0xae>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00f      	beq.n	8003e4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	0151      	lsls	r1, r2, #5
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	440a      	add	r2, r1
 8003e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d128      	bne.n	8003ee6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	78db      	ldrb	r3, [r3, #3]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d003      	beq.n	8003ec4 <USB_EPClearStall+0x4c>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	78db      	ldrb	r3, [r3, #3]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d138      	bne.n	8003f36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	e027      	b.n	8003f36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	78db      	ldrb	r3, [r3, #3]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d003      	beq.n	8003f16 <USB_EPClearStall+0x9e>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	78db      	ldrb	r3, [r3, #3]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d10f      	bne.n	8003f36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	0151      	lsls	r1, r2, #5
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	440a      	add	r2, r1
 8003f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003f78:	68f9      	ldr	r1, [r7, #12]
 8003f7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003faa:	f023 0302 	bic.w	r3, r3, #2
 8003fae:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003fb0:	2003      	movs	r0, #3
 8003fb2:	f7fc f979 	bl	80002a8 <HAL_Delay>

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fda:	f043 0302 	orr.w	r3, r3, #2
 8003fde:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003fe0:	2003      	movs	r0, #3
 8003fe2:	f7fc f961 	bl	80002a8 <HAL_Delay>

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4013      	ands	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004008:	68fb      	ldr	r3, [r7, #12]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	0c1b      	lsrs	r3, r3, #16
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	b29b      	uxth	r3, r3
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	460b      	mov	r3, r1
 8004088:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040ac:	68bb      	ldr	r3, [r7, #8]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b087      	sub	sp, #28
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004108:	68bb      	ldr	r3, [r7, #8]
}
 800410a:	4618      	mov	r0, r3
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0301 	and.w	r3, r3, #1
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004150:	f023 0307 	bic.w	r3, r3, #7
 8004154:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0306 	and.w	r3, r3, #6
 8004162:	2b04      	cmp	r3, #4
 8004164:	d109      	bne.n	800417a <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004174:	f043 0303 	orr.w	r3, r3, #3
 8004178:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	333c      	adds	r3, #60	; 0x3c
 80041ae:	3304      	adds	r3, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <USB_EP0_OutStart+0x8c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d90a      	bls.n	80041d2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041cc:	d101      	bne.n	80041d2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e024      	b.n	800421c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	461a      	mov	r2, r3
 80041da:	2300      	movs	r3, #0
 80041dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004200:	f043 0318 	orr.w	r3, r3, #24
 8004204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004214:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004218:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	4f54300a 	.word	0x4f54300a

0800422c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3301      	adds	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a13      	ldr	r2, [pc, #76]	; (8004290 <USB_CoreReset+0x64>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e01b      	b.n	8004282 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	daf2      	bge.n	8004238 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f043 0201 	orr.w	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3301      	adds	r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <USB_CoreReset+0x64>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d901      	bls.n	8004274 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e006      	b.n	8004282 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d0f0      	beq.n	8004262 <USB_CoreReset+0x36>

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	00030d40 	.word	0x00030d40

08004294 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80042a4:	2340      	movs	r3, #64	; 0x40
 80042a6:	2203      	movs	r2, #3
 80042a8:	2181      	movs	r1, #129	; 0x81
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f001 ff14 	bl	80060d8 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80042b6:	2340      	movs	r3, #64	; 0x40
 80042b8:	2203      	movs	r2, #3
 80042ba:	2101      	movs	r1, #1
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f001 ff0b 	bl	80060d8 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 80042ca:	2054      	movs	r0, #84	; 0x54
 80042cc:	f002 f908 	bl	80064e0 <USBD_static_malloc>
 80042d0:	4602      	mov	r2, r0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
 80042e6:	e012      	b.n	800430e <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80042ee:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	2340      	movs	r3, #64	; 0x40
 8004306:	2101      	movs	r1, #1
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f002 f861 	bl	80063d0 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004324:	2181      	movs	r1, #129	; 0x81
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f001 ff14 	bl	8006154 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004332:	2101      	movs	r1, #1
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f001 ff0d 	bl	8006154 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00e      	beq.n	800436a <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800435c:	4618      	mov	r0, r3
 800435e:	f002 f8cd 	bl	80064fc <USBD_static_free>
    pdev->pClassData = NULL;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004384:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d051      	beq.n	8004446 <USBD_CUSTOM_HID_Setup+0xd2>
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	f040 80d8 	bne.w	8004558 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	3b02      	subs	r3, #2
 80043ae:	2b09      	cmp	r3, #9
 80043b0:	d841      	bhi.n	8004436 <USBD_CUSTOM_HID_Setup+0xc2>
 80043b2:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <USBD_CUSTOM_HID_Setup+0x44>)
 80043b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b8:	08004411 	.word	0x08004411
 80043bc:	080043ef 	.word	0x080043ef
 80043c0:	08004437 	.word	0x08004437
 80043c4:	08004437 	.word	0x08004437
 80043c8:	08004437 	.word	0x08004437
 80043cc:	08004437 	.word	0x08004437
 80043d0:	08004437 	.word	0x08004437
 80043d4:	08004421 	.word	0x08004421
 80043d8:	080043ff 	.word	0x080043ff
 80043dc:	080043e1 	.word	0x080043e1
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	885b      	ldrh	r3, [r3, #2]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80043ec:	e02a      	b.n	8004444 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3340      	adds	r3, #64	; 0x40
 80043f2:	2201      	movs	r2, #1
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f001 f97e 	bl	80056f8 <USBD_CtlSendData>
      break;
 80043fc:	e022      	b.n	8004444 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	885b      	ldrh	r3, [r3, #2]
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	b29b      	uxth	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800440e:	e019      	b.n	8004444 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	3344      	adds	r3, #68	; 0x44
 8004414:	2201      	movs	r2, #1
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 f96d 	bl	80056f8 <USBD_CtlSendData>
      break;
 800441e:	e011      	b.n	8004444 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2201      	movs	r2, #1
 8004424:	64da      	str	r2, [r3, #76]	; 0x4c
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8004426:	6939      	ldr	r1, [r7, #16]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	88db      	ldrh	r3, [r3, #6]
 800442c:	461a      	mov	r2, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f001 f990 	bl	8005754 <USBD_CtlPrepareRx>
      break;
 8004434:	e006      	b.n	8004444 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 8004436:	6839      	ldr	r1, [r7, #0]
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f001 f8f2 	bl	8005622 <USBD_CtlError>
      ret = USBD_FAIL;
 800443e:	2302      	movs	r3, #2
 8004440:	75fb      	strb	r3, [r7, #23]
      break;
 8004442:	bf00      	nop
    }
    break;
 8004444:	e08f      	b.n	8004566 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	2b0b      	cmp	r3, #11
 800444c:	d87c      	bhi.n	8004548 <USBD_CUSTOM_HID_Setup+0x1d4>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <USBD_CUSTOM_HID_Setup+0xe0>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004485 	.word	0x08004485
 8004458:	08004549 	.word	0x08004549
 800445c:	08004549 	.word	0x08004549
 8004460:	08004549 	.word	0x08004549
 8004464:	08004549 	.word	0x08004549
 8004468:	08004549 	.word	0x08004549
 800446c:	080044ad 	.word	0x080044ad
 8004470:	08004549 	.word	0x08004549
 8004474:	08004549 	.word	0x08004549
 8004478:	08004549 	.word	0x08004549
 800447c:	080044fb 	.word	0x080044fb
 8004480:	08004523 	.word	0x08004523
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800448a:	2b03      	cmp	r3, #3
 800448c:	d107      	bne.n	800449e <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800448e:	f107 030e 	add.w	r3, r7, #14
 8004492:	2202      	movs	r2, #2
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f001 f92e 	bl	80056f8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800449c:	e05b      	b.n	8004556 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800449e:	6839      	ldr	r1, [r7, #0]
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f001 f8be 	bl	8005622 <USBD_CtlError>
			  ret = USBD_FAIL;
 80044a6:	2302      	movs	r3, #2
 80044a8:	75fb      	strb	r3, [r7, #23]
      break;
 80044aa:	e054      	b.n	8004556 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	885b      	ldrh	r3, [r3, #2]
 80044b0:	0a1b      	lsrs	r3, r3, #8
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b22      	cmp	r3, #34	; 0x22
 80044b6:	d10b      	bne.n	80044d0 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	88db      	ldrh	r3, [r3, #6]
 80044bc:	2b4f      	cmp	r3, #79	; 0x4f
 80044be:	bf28      	it	cs
 80044c0:	234f      	movcs	r3, #79	; 0x4f
 80044c2:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	e00d      	b.n	80044ec <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	885b      	ldrh	r3, [r3, #2]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b21      	cmp	r3, #33	; 0x21
 80044da:	d107      	bne.n	80044ec <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 80044dc:	4b24      	ldr	r3, [pc, #144]	; (8004570 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80044de:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	88db      	ldrh	r3, [r3, #6]
 80044e4:	2b09      	cmp	r3, #9
 80044e6:	bf28      	it	cs
 80044e8:	2309      	movcs	r3, #9
 80044ea:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 80044ec:	8bfb      	ldrh	r3, [r7, #30]
 80044ee:	461a      	mov	r2, r3
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 f900 	bl	80056f8 <USBD_CtlSendData>
      break;
 80044f8:	e02d      	b.n	8004556 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004500:	2b03      	cmp	r3, #3
 8004502:	d107      	bne.n	8004514 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	3348      	adds	r3, #72	; 0x48
 8004508:	2201      	movs	r2, #1
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f001 f8f3 	bl	80056f8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004512:	e020      	b.n	8004556 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 8004514:	6839      	ldr	r1, [r7, #0]
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f001 f883 	bl	8005622 <USBD_CtlError>
			  ret = USBD_FAIL;
 800451c:	2302      	movs	r3, #2
 800451e:	75fb      	strb	r3, [r7, #23]
      break;
 8004520:	e019      	b.n	8004556 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004528:	2b03      	cmp	r3, #3
 800452a:	d106      	bne.n	800453a <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	885b      	ldrh	r3, [r3, #2]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	649a      	str	r2, [r3, #72]	; 0x48
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004538:	e00d      	b.n	8004556 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800453a:	6839      	ldr	r1, [r7, #0]
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f001 f870 	bl	8005622 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004542:	2302      	movs	r3, #2
 8004544:	75fb      	strb	r3, [r7, #23]
      break;
 8004546:	e006      	b.n	8004556 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 f869 	bl	8005622 <USBD_CtlError>
      ret = USBD_FAIL;
 8004550:	2302      	movs	r3, #2
 8004552:	75fb      	strb	r3, [r7, #23]
      break;
 8004554:	bf00      	nop
    }
    break;
 8004556:	e006      	b.n	8004566 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 8004558:	6839      	ldr	r1, [r7, #0]
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f001 f861 	bl	8005622 <USBD_CtlError>
    ret = USBD_FAIL;
 8004560:	2302      	movs	r3, #2
 8004562:	75fb      	strb	r3, [r7, #23]
    break;
 8004564:	bf00      	nop
  }
  return ret;
 8004566:	7dfb      	ldrb	r3, [r7, #23]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	200000c4 	.word	0x200000c4

08004574 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004588:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004590:	2b03      	cmp	r3, #3
 8004592:	d111      	bne.n	80045b8 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	2181      	movs	r1, #129	; 0x81
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f001 fed5 	bl	800635c <USBD_LL_Transmit>
 80045b2:	e001      	b.n	80045b8 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2229      	movs	r2, #41	; 0x29
 80045d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80045d2:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	20000040 	.word	0x20000040

080045e4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2229      	movs	r2, #41	; 0x29
 80045f0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80045f2:	4b03      	ldr	r3, [pc, #12]	; (8004600 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	2000006c 	.word	0x2000006c

08004604 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2229      	movs	r2, #41	; 0x29
 8004610:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004612:	4b03      	ldr	r3, [pc, #12]	; (8004620 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	20000098 	.word	0x20000098

08004624 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800465c:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	7810      	ldrb	r0, [r2, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	7852      	ldrb	r2, [r2, #1]
 800466e:	4611      	mov	r1, r2
 8004670:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	2340      	movs	r3, #64	; 0x40
 8004676:	2101      	movs	r1, #1
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f001 fea9 	bl	80063d0 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004696:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10c      	bne.n	80046ba <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	7810      	ldrb	r0, [r2, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	7852      	ldrb	r2, [r2, #1]
 80046b0:	4611      	mov	r1, r2
 80046b2:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	220a      	movs	r2, #10
 80046d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80046d2:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	200000d0 	.word	0x200000d0

080046e4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80046ee:	2302      	movs	r3, #2
 80046f0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004704:	7bfb      	ldrb	r3, [r7, #15]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004726:	2302      	movs	r3, #2
 8004728:	e01a      	b.n	8004760 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	79fa      	ldrb	r2, [r7, #7]
 8004756:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f001 fc3f 	bl	8005fdc <USBD_LL_Init>

  return USBD_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d006      	beq.n	800478a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e001      	b.n	800478e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800478a:	2302      	movs	r3, #2
 800478c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f001 fc65 	bl	8006074 <USBD_LL_Start>

  return USBD_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80047d6:	2302      	movs	r3, #2
 80047d8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00c      	beq.n	80047fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	78fa      	ldrb	r2, [r7, #3]
 80047ee:	4611      	mov	r1, r2
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	4611      	mov	r1, r2
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	4798      	blx	r3
  return USBD_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800483e:	6839      	ldr	r1, [r7, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 feb1 	bl	80055a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2b01      	cmp	r3, #1
 8004868:	d00c      	beq.n	8004884 <USBD_LL_SetupStage+0x56>
 800486a:	2b01      	cmp	r3, #1
 800486c:	d302      	bcc.n	8004874 <USBD_LL_SetupStage+0x46>
 800486e:	2b02      	cmp	r3, #2
 8004870:	d010      	beq.n	8004894 <USBD_LL_SetupStage+0x66>
 8004872:	e017      	b.n	80048a4 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fa05 	bl	8004c8c <USBD_StdDevReq>
    break;
 8004882:	e01a      	b.n	80048ba <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fa67 	bl	8004d60 <USBD_StdItfReq>
    break;
 8004892:	e012      	b.n	80048ba <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 faa5 	bl	8004dec <USBD_StdEPReq>
    break;
 80048a2:	e00a      	b.n	80048ba <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80048aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f001 fc84 	bl	80061c0 <USBD_LL_StallEP>
    break;
 80048b8:	bf00      	nop
  }

  return USBD_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	460b      	mov	r3, r1
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80048d2:	7afb      	ldrb	r3, [r7, #11]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d14b      	bne.n	8004970 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80048de:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d134      	bne.n	8004954 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d919      	bls.n	800492a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	1ad2      	subs	r2, r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800490c:	429a      	cmp	r2, r3
 800490e:	d203      	bcs.n	8004918 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8004914:	b29b      	uxth	r3, r3
 8004916:	e002      	b.n	800491e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800491c:	b29b      	uxth	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 ff34 	bl	8005790 <USBD_CtlContinueRx>
 8004928:	e038      	b.n	800499c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800493c:	2b03      	cmp	r3, #3
 800493e:	d105      	bne.n	800494c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 ff31 	bl	80057b4 <USBD_CtlSendStatus>
 8004952:	e023      	b.n	800499c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800495a:	2b05      	cmp	r3, #5
 800495c:	d11e      	bne.n	800499c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004966:	2100      	movs	r1, #0
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f001 fc29 	bl	80061c0 <USBD_LL_StallEP>
 800496e:	e015      	b.n	800499c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00d      	beq.n	8004998 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8004982:	2b03      	cmp	r3, #3
 8004984:	d108      	bne.n	8004998 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	7afa      	ldrb	r2, [r7, #11]
 8004990:	4611      	mov	r1, r2
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	4798      	blx	r3
 8004996:	e001      	b.n	800499c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004998:	2302      	movs	r3, #2
 800499a:	e000      	b.n	800499e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	460b      	mov	r3, r1
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80049b4:	7afb      	ldrb	r3, [r7, #11]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d17f      	bne.n	8004aba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3314      	adds	r3, #20
 80049be:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d15c      	bne.n	8004a84 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d915      	bls.n	8004a02 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	1ad2      	subs	r2, r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fe9e 	bl	8005730 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80049f4:	2300      	movs	r3, #0
 80049f6:	2200      	movs	r2, #0
 80049f8:	2100      	movs	r1, #0
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f001 fce8 	bl	80063d0 <USBD_LL_PrepareReceive>
 8004a00:	e04e      	b.n	8004aa0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	6912      	ldr	r2, [r2, #16]
 8004a0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a0e:	fb02 f201 	mul.w	r2, r2, r1
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d11c      	bne.n	8004a52 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d316      	bcc.n	8004a52 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d20f      	bcs.n	8004a52 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a32:	2200      	movs	r2, #0
 8004a34:	2100      	movs	r1, #0
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fe7a 	bl	8005730 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004a44:	2300      	movs	r3, #0
 8004a46:	2200      	movs	r2, #0
 8004a48:	2100      	movs	r1, #0
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f001 fcc0 	bl	80063d0 <USBD_LL_PrepareReceive>
 8004a50:	e026      	b.n	8004aa0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d105      	bne.n	8004a74 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004a74:	2180      	movs	r1, #128	; 0x80
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f001 fba2 	bl	80061c0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 feac 	bl	80057da <USBD_CtlReceiveStatus>
 8004a82:	e00d      	b.n	8004aa0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d004      	beq.n	8004a98 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d103      	bne.n	8004aa0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004a98:	2180      	movs	r1, #128	; 0x80
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f001 fb90 	bl	80061c0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d11d      	bne.n	8004ae6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fe82 	bl	80047b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8004ab8:	e015      	b.n	8004ae6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d108      	bne.n	8004ae2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	7afa      	ldrb	r2, [r7, #11]
 8004ada:	4611      	mov	r1, r2
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	4798      	blx	r3
 8004ae0:	e001      	b.n	8004ae6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e000      	b.n	8004ae8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004af8:	2340      	movs	r3, #64	; 0x40
 8004afa:	2200      	movs	r2, #0
 8004afc:	2100      	movs	r1, #0
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f001 faea 	bl	80060d8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2240      	movs	r2, #64	; 0x40
 8004b10:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b14:	2340      	movs	r3, #64	; 0x40
 8004b16:	2200      	movs	r2, #0
 8004b18:	2180      	movs	r1, #128	; 0x80
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f001 fadc 	bl	80060d8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2240      	movs	r2, #64	; 0x40
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6852      	ldr	r2, [r2, #4]
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	4611      	mov	r1, r2
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
  }

  return USBD_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2204      	movs	r2, #4
 8004baa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d10b      	bne.n	8004c08 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6852      	ldr	r2, [r2, #4]
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	4798      	blx	r3

  return USBD_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d004      	beq.n	8004cb0 <USBD_StdDevReq+0x24>
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d002      	beq.n	8004cb0 <USBD_StdDevReq+0x24>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d008      	beq.n	8004cc0 <USBD_StdDevReq+0x34>
 8004cae:	e04c      	b.n	8004d4a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	6839      	ldr	r1, [r7, #0]
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
    break;
 8004cbe:	e049      	b.n	8004d54 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	785b      	ldrb	r3, [r3, #1]
 8004cc4:	2b09      	cmp	r3, #9
 8004cc6:	d83a      	bhi.n	8004d3e <USBD_StdDevReq+0xb2>
 8004cc8:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <USBD_StdDevReq+0x44>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004d21 	.word	0x08004d21
 8004cd4:	08004d35 	.word	0x08004d35
 8004cd8:	08004d3f 	.word	0x08004d3f
 8004cdc:	08004d2b 	.word	0x08004d2b
 8004ce0:	08004d3f 	.word	0x08004d3f
 8004ce4:	08004d03 	.word	0x08004d03
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004d3f 	.word	0x08004d3f
 8004cf0:	08004d17 	.word	0x08004d17
 8004cf4:	08004d0d 	.word	0x08004d0d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f9d2 	bl	80050a4 <USBD_GetDescriptor>
      break;
 8004d00:	e022      	b.n	8004d48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fae3 	bl	80052d0 <USBD_SetAddress>
      break;
 8004d0a:	e01d      	b.n	8004d48 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8004d0c:	6839      	ldr	r1, [r7, #0]
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fb20 	bl	8005354 <USBD_SetConfig>
      break;
 8004d14:	e018      	b.n	8004d48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8004d16:	6839      	ldr	r1, [r7, #0]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fba9 	bl	8005470 <USBD_GetConfig>
      break;
 8004d1e:	e013      	b.n	8004d48 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fbd8 	bl	80054d8 <USBD_GetStatus>
      break;
 8004d28:	e00e      	b.n	8004d48 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8004d2a:	6839      	ldr	r1, [r7, #0]
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fc06 	bl	800553e <USBD_SetFeature>
      break;
 8004d32:	e009      	b.n	8004d48 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fc15 	bl	8005566 <USBD_ClrFeature>
      break;
 8004d3c:	e004      	b.n	8004d48 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fc6e 	bl	8005622 <USBD_CtlError>
      break;
 8004d46:	bf00      	nop
    }
    break;
 8004d48:	e004      	b.n	8004d54 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fc68 	bl	8005622 <USBD_CtlError>
    break;
 8004d52:	bf00      	nop
  }

  return ret;
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop

08004d60 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d003      	beq.n	8004d82 <USBD_StdItfReq+0x22>
 8004d7a:	2b40      	cmp	r3, #64	; 0x40
 8004d7c:	d001      	beq.n	8004d82 <USBD_StdItfReq+0x22>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d12a      	bne.n	8004dd8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d81d      	bhi.n	8004dca <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	889b      	ldrh	r3, [r3, #4]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d813      	bhi.n	8004dc0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	88db      	ldrh	r3, [r3, #6]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d110      	bne.n	8004dd4 <USBD_StdItfReq+0x74>
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10d      	bne.n	8004dd4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fcfb 	bl	80057b4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004dbe:	e009      	b.n	8004dd4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fc2d 	bl	8005622 <USBD_CtlError>
      break;
 8004dc8:	e004      	b.n	8004dd4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fc28 	bl	8005622 <USBD_CtlError>
      break;
 8004dd2:	e000      	b.n	8004dd6 <USBD_StdItfReq+0x76>
      break;
 8004dd4:	bf00      	nop
    }
    break;
 8004dd6:	e004      	b.n	8004de2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fc21 	bl	8005622 <USBD_CtlError>
    break;
 8004de0:	bf00      	nop
  }

  return USBD_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	889b      	ldrh	r3, [r3, #4]
 8004dfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d004      	beq.n	8004e16 <USBD_StdEPReq+0x2a>
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d002      	beq.n	8004e16 <USBD_StdEPReq+0x2a>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <USBD_StdEPReq+0x3a>
 8004e14:	e13b      	b.n	800508e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
    break;
 8004e24:	e138      	b.n	8005098 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d10a      	bne.n	8004e48 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	4798      	blx	r3
 8004e40:	4603      	mov	r3, r0
 8004e42:	73fb      	strb	r3, [r7, #15]

      return ret;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	e128      	b.n	800509a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d03e      	beq.n	8004ece <USBD_StdEPReq+0xe2>
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d002      	beq.n	8004e5a <USBD_StdEPReq+0x6e>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d070      	beq.n	8004f3a <USBD_StdEPReq+0x14e>
 8004e58:	e113      	b.n	8005082 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d002      	beq.n	8004e6a <USBD_StdEPReq+0x7e>
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d015      	beq.n	8004e94 <USBD_StdEPReq+0xa8>
 8004e68:	e02b      	b.n	8004ec2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e6a:	7bbb      	ldrb	r3, [r7, #14]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00c      	beq.n	8004e8a <USBD_StdEPReq+0x9e>
 8004e70:	7bbb      	ldrb	r3, [r7, #14]
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d009      	beq.n	8004e8a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004e76:	7bbb      	ldrb	r3, [r7, #14]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f001 f9a0 	bl	80061c0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 f99c 	bl	80061c0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004e88:	e020      	b.n	8004ecc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fbc8 	bl	8005622 <USBD_CtlError>
        break;
 8004e92:	e01b      	b.n	8004ecc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	885b      	ldrh	r3, [r3, #2]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10e      	bne.n	8004eba <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004e9c:	7bbb      	ldrb	r3, [r7, #14]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <USBD_StdEPReq+0xce>
 8004ea2:	7bbb      	ldrb	r3, [r7, #14]
 8004ea4:	2b80      	cmp	r3, #128	; 0x80
 8004ea6:	d008      	beq.n	8004eba <USBD_StdEPReq+0xce>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	88db      	ldrh	r3, [r3, #6]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d104      	bne.n	8004eba <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 f983 	bl	80061c0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fc7a 	bl	80057b4 <USBD_CtlSendStatus>

        break;
 8004ec0:	e004      	b.n	8004ecc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fbac 	bl	8005622 <USBD_CtlError>
        break;
 8004eca:	bf00      	nop
      }
      break;
 8004ecc:	e0de      	b.n	800508c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d002      	beq.n	8004ede <USBD_StdEPReq+0xf2>
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d015      	beq.n	8004f08 <USBD_StdEPReq+0x11c>
 8004edc:	e026      	b.n	8004f2c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ede:	7bbb      	ldrb	r3, [r7, #14]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00c      	beq.n	8004efe <USBD_StdEPReq+0x112>
 8004ee4:	7bbb      	ldrb	r3, [r7, #14]
 8004ee6:	2b80      	cmp	r3, #128	; 0x80
 8004ee8:	d009      	beq.n	8004efe <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f001 f966 	bl	80061c0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004ef4:	2180      	movs	r1, #128	; 0x80
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 f962 	bl	80061c0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004efc:	e01c      	b.n	8004f38 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8004efe:	6839      	ldr	r1, [r7, #0]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fb8e 	bl	8005622 <USBD_CtlError>
        break;
 8004f06:	e017      	b.n	8004f38 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	885b      	ldrh	r3, [r3, #2]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d112      	bne.n	8004f36 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004f10:	7bbb      	ldrb	r3, [r7, #14]
 8004f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d004      	beq.n	8004f24 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004f1a:	7bbb      	ldrb	r3, [r7, #14]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 f984 	bl	800622c <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fc45 	bl	80057b4 <USBD_CtlSendStatus>
        }
        break;
 8004f2a:	e004      	b.n	8004f36 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fb77 	bl	8005622 <USBD_CtlError>
        break;
 8004f34:	e000      	b.n	8004f38 <USBD_StdEPReq+0x14c>
        break;
 8004f36:	bf00      	nop
      }
      break;
 8004f38:	e0a8      	b.n	800508c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d002      	beq.n	8004f4a <USBD_StdEPReq+0x15e>
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d031      	beq.n	8004fac <USBD_StdEPReq+0x1c0>
 8004f48:	e095      	b.n	8005076 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f4a:	7bbb      	ldrb	r3, [r7, #14]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <USBD_StdEPReq+0x174>
 8004f50:	7bbb      	ldrb	r3, [r7, #14]
 8004f52:	2b80      	cmp	r3, #128	; 0x80
 8004f54:	d004      	beq.n	8004f60 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fb62 	bl	8005622 <USBD_CtlError>
          break;
 8004f5e:	e08f      	b.n	8005080 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	da0b      	bge.n	8004f80 <USBD_StdEPReq+0x194>
 8004f68:	7bbb      	ldrb	r3, [r7, #14]
 8004f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	3310      	adds	r3, #16
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	e00a      	b.n	8004f96 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004f80:	7bbb      	ldrb	r3, [r7, #14]
 8004f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	4413      	add	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fba7 	bl	80056f8 <USBD_CtlSendData>
          break;
 8004faa:	e069      	b.n	8005080 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8004fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	da11      	bge.n	8004fd8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004fb4:	7bbb      	ldrb	r3, [r7, #14]
 8004fb6:	f003 020f 	and.w	r2, r3, #15
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	3318      	adds	r3, #24
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d117      	bne.n	8004ffe <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb26 	bl	8005622 <USBD_CtlError>
            break;
 8004fd6:	e053      	b.n	8005080 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004fd8:	7bbb      	ldrb	r3, [r7, #14]
 8004fda:	f003 020f 	and.w	r2, r3, #15
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d104      	bne.n	8004ffe <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fb13 	bl	8005622 <USBD_CtlError>
            break;
 8004ffc:	e040      	b.n	8005080 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005002:	2b00      	cmp	r3, #0
 8005004:	da0b      	bge.n	800501e <USBD_StdEPReq+0x232>
 8005006:	7bbb      	ldrb	r3, [r7, #14]
 8005008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	3310      	adds	r3, #16
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	4413      	add	r3, r2
 800501a:	3304      	adds	r3, #4
 800501c:	e00a      	b.n	8005034 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800501e:	7bbb      	ldrb	r3, [r7, #14]
 8005020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005036:	7bbb      	ldrb	r3, [r7, #14]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <USBD_StdEPReq+0x256>
 800503c:	7bbb      	ldrb	r3, [r7, #14]
 800503e:	2b80      	cmp	r3, #128	; 0x80
 8005040:	d103      	bne.n	800504a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e00e      	b.n	8005068 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	4619      	mov	r1, r3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 f922 	bl	8006298 <USBD_LL_IsStallEP>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2201      	movs	r2, #1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e002      	b.n	8005068 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2202      	movs	r2, #2
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fb42 	bl	80056f8 <USBD_CtlSendData>
          break;
 8005074:	e004      	b.n	8005080 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fad2 	bl	8005622 <USBD_CtlError>
        break;
 800507e:	bf00      	nop
      }
      break;
 8005080:	e004      	b.n	800508c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 facc 	bl	8005622 <USBD_CtlError>
      break;
 800508a:	bf00      	nop
    }
    break;
 800508c:	e004      	b.n	8005098 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fac6 	bl	8005622 <USBD_CtlError>
    break;
 8005096:	bf00      	nop
  }

  return ret;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	885b      	ldrh	r3, [r3, #2]
 80050b2:	0a1b      	lsrs	r3, r3, #8
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	2b0e      	cmp	r3, #14
 80050ba:	f200 80e5 	bhi.w	8005288 <USBD_GetDescriptor+0x1e4>
 80050be:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <USBD_GetDescriptor+0x20>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	08005119 	.word	0x08005119
 80050c8:	08005131 	.word	0x08005131
 80050cc:	08005171 	.word	0x08005171
 80050d0:	08005289 	.word	0x08005289
 80050d4:	08005289 	.word	0x08005289
 80050d8:	08005235 	.word	0x08005235
 80050dc:	0800525b 	.word	0x0800525b
 80050e0:	08005289 	.word	0x08005289
 80050e4:	08005289 	.word	0x08005289
 80050e8:	08005289 	.word	0x08005289
 80050ec:	08005289 	.word	0x08005289
 80050f0:	08005289 	.word	0x08005289
 80050f4:	08005289 	.word	0x08005289
 80050f8:	08005289 	.word	0x08005289
 80050fc:	08005101 	.word	0x08005101
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	7c12      	ldrb	r2, [r2, #16]
 800510c:	f107 010a 	add.w	r1, r7, #10
 8005110:	4610      	mov	r0, r2
 8005112:	4798      	blx	r3
 8005114:	60f8      	str	r0, [r7, #12]
    break;
 8005116:	e0bc      	b.n	8005292 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	7c12      	ldrb	r2, [r2, #16]
 8005124:	f107 010a 	add.w	r1, r7, #10
 8005128:	4610      	mov	r0, r2
 800512a:	4798      	blx	r3
 800512c:	60f8      	str	r0, [r7, #12]
    break;
 800512e:	e0b0      	b.n	8005292 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	7c1b      	ldrb	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10d      	bne.n	8005154 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	f107 020a 	add.w	r2, r7, #10
 8005144:	4610      	mov	r0, r2
 8005146:	4798      	blx	r3
 8005148:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3301      	adds	r3, #1
 800514e:	2202      	movs	r2, #2
 8005150:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005152:	e09e      	b.n	8005292 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	f107 020a 	add.w	r2, r7, #10
 8005160:	4610      	mov	r0, r2
 8005162:	4798      	blx	r3
 8005164:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	2202      	movs	r2, #2
 800516c:	701a      	strb	r2, [r3, #0]
    break;
 800516e:	e090      	b.n	8005292 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	885b      	ldrh	r3, [r3, #2]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b05      	cmp	r3, #5
 8005178:	d856      	bhi.n	8005228 <USBD_GetDescriptor+0x184>
 800517a:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <USBD_GetDescriptor+0xdc>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	08005199 	.word	0x08005199
 8005184:	080051b1 	.word	0x080051b1
 8005188:	080051c9 	.word	0x080051c9
 800518c:	080051e1 	.word	0x080051e1
 8005190:	080051f9 	.word	0x080051f9
 8005194:	08005211 	.word	0x08005211
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	7c12      	ldrb	r2, [r2, #16]
 80051a4:	f107 010a 	add.w	r1, r7, #10
 80051a8:	4610      	mov	r0, r2
 80051aa:	4798      	blx	r3
 80051ac:	60f8      	str	r0, [r7, #12]
      break;
 80051ae:	e040      	b.n	8005232 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	7c12      	ldrb	r2, [r2, #16]
 80051bc:	f107 010a 	add.w	r1, r7, #10
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
 80051c4:	60f8      	str	r0, [r7, #12]
      break;
 80051c6:	e034      	b.n	8005232 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	7c12      	ldrb	r2, [r2, #16]
 80051d4:	f107 010a 	add.w	r1, r7, #10
 80051d8:	4610      	mov	r0, r2
 80051da:	4798      	blx	r3
 80051dc:	60f8      	str	r0, [r7, #12]
      break;
 80051de:	e028      	b.n	8005232 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	7c12      	ldrb	r2, [r2, #16]
 80051ec:	f107 010a 	add.w	r1, r7, #10
 80051f0:	4610      	mov	r0, r2
 80051f2:	4798      	blx	r3
 80051f4:	60f8      	str	r0, [r7, #12]
      break;
 80051f6:	e01c      	b.n	8005232 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	7c12      	ldrb	r2, [r2, #16]
 8005204:	f107 010a 	add.w	r1, r7, #10
 8005208:	4610      	mov	r0, r2
 800520a:	4798      	blx	r3
 800520c:	60f8      	str	r0, [r7, #12]
      break;
 800520e:	e010      	b.n	8005232 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	7c12      	ldrb	r2, [r2, #16]
 800521c:	f107 010a 	add.w	r1, r7, #10
 8005220:	4610      	mov	r0, r2
 8005222:	4798      	blx	r3
 8005224:	60f8      	str	r0, [r7, #12]
      break;
 8005226:	e004      	b.n	8005232 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9f9 	bl	8005622 <USBD_CtlError>
      return;
 8005230:	e04b      	b.n	80052ca <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8005232:	e02e      	b.n	8005292 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	7c1b      	ldrb	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005244:	f107 020a 	add.w	r2, r7, #10
 8005248:	4610      	mov	r0, r2
 800524a:	4798      	blx	r3
 800524c:	60f8      	str	r0, [r7, #12]
      break;
 800524e:	e020      	b.n	8005292 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9e5 	bl	8005622 <USBD_CtlError>
      return;
 8005258:	e037      	b.n	80052ca <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7c1b      	ldrb	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10d      	bne.n	800527e <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f107 020a 	add.w	r2, r7, #10
 800526e:	4610      	mov	r0, r2
 8005270:	4798      	blx	r3
 8005272:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	2207      	movs	r2, #7
 800527a:	701a      	strb	r2, [r3, #0]
      break;
 800527c:	e009      	b.n	8005292 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f9ce 	bl	8005622 <USBD_CtlError>
      return;
 8005286:	e020      	b.n	80052ca <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f9c9 	bl	8005622 <USBD_CtlError>
    return;
 8005290:	e01b      	b.n	80052ca <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8005292:	897b      	ldrh	r3, [r7, #10]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d011      	beq.n	80052bc <USBD_GetDescriptor+0x218>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	88db      	ldrh	r3, [r3, #6]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00d      	beq.n	80052bc <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	88da      	ldrh	r2, [r3, #6]
 80052a4:	897b      	ldrh	r3, [r7, #10]
 80052a6:	4293      	cmp	r3, r2
 80052a8:	bf28      	it	cs
 80052aa:	4613      	movcs	r3, r2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80052b0:	897b      	ldrh	r3, [r7, #10]
 80052b2:	461a      	mov	r2, r3
 80052b4:	68f9      	ldr	r1, [r7, #12]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa1e 	bl	80056f8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	88db      	ldrh	r3, [r3, #6]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa75 	bl	80057b4 <USBD_CtlSendStatus>
  }
}
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	889b      	ldrh	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d130      	bne.n	8005344 <USBD_SetAddress+0x74>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	88db      	ldrh	r3, [r3, #6]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d12c      	bne.n	8005344 <USBD_SetAddress+0x74>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	885b      	ldrh	r3, [r3, #2]
 80052ee:	2b7f      	cmp	r3, #127	; 0x7f
 80052f0:	d828      	bhi.n	8005344 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	885b      	ldrh	r3, [r3, #2]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005304:	2b03      	cmp	r3, #3
 8005306:	d104      	bne.n	8005312 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f989 	bl	8005622 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005310:	e01c      	b.n	800534c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	7bfa      	ldrb	r2, [r7, #15]
 8005316:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 ffe6 	bl	80062f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fa45 	bl	80057b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005338:	e008      	b.n	800534c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005342:	e003      	b.n	800534c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f96b 	bl	8005622 <USBD_CtlError>
  }
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	885b      	ldrh	r3, [r3, #2]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	4b41      	ldr	r3, [pc, #260]	; (800546c <USBD_SetConfig+0x118>)
 8005366:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005368:	4b40      	ldr	r3, [pc, #256]	; (800546c <USBD_SetConfig+0x118>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d904      	bls.n	800537a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f955 	bl	8005622 <USBD_CtlError>
 8005378:	e075      	b.n	8005466 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005380:	2b02      	cmp	r3, #2
 8005382:	d002      	beq.n	800538a <USBD_SetConfig+0x36>
 8005384:	2b03      	cmp	r3, #3
 8005386:	d023      	beq.n	80053d0 <USBD_SetConfig+0x7c>
 8005388:	e062      	b.n	8005450 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800538a:	4b38      	ldr	r3, [pc, #224]	; (800546c <USBD_SetConfig+0x118>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01a      	beq.n	80053c8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8005392:	4b36      	ldr	r3, [pc, #216]	; (800546c <USBD_SetConfig+0x118>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2203      	movs	r2, #3
 80053a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80053a4:	4b31      	ldr	r3, [pc, #196]	; (800546c <USBD_SetConfig+0x118>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff fa0d 	bl	80047ca <USBD_SetClassConfig>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d104      	bne.n	80053c0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f932 	bl	8005622 <USBD_CtlError>
          return;
 80053be:	e052      	b.n	8005466 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f9f7 	bl	80057b4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80053c6:	e04e      	b.n	8005466 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f9f3 	bl	80057b4 <USBD_CtlSendStatus>
      break;
 80053ce:	e04a      	b.n	8005466 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80053d0:	4b26      	ldr	r3, [pc, #152]	; (800546c <USBD_SetConfig+0x118>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d112      	bne.n	80053fe <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80053e0:	4b22      	ldr	r3, [pc, #136]	; (800546c <USBD_SetConfig+0x118>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80053ea:	4b20      	ldr	r3, [pc, #128]	; (800546c <USBD_SetConfig+0x118>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fa09 	bl	8004808 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f9dc 	bl	80057b4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80053fc:	e033      	b.n	8005466 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80053fe:	4b1b      	ldr	r3, [pc, #108]	; (800546c <USBD_SetConfig+0x118>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	d01d      	beq.n	8005448 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff f9f7 	bl	8004808 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800541a:	4b14      	ldr	r3, [pc, #80]	; (800546c <USBD_SetConfig+0x118>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <USBD_SetConfig+0x118>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	4619      	mov	r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff f9cd 	bl	80047ca <USBD_SetClassConfig>
 8005430:	4603      	mov	r3, r0
 8005432:	2b02      	cmp	r3, #2
 8005434:	d104      	bne.n	8005440 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8005436:	6839      	ldr	r1, [r7, #0]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f8f2 	bl	8005622 <USBD_CtlError>
          return;
 800543e:	e012      	b.n	8005466 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f9b7 	bl	80057b4 <USBD_CtlSendStatus>
      break;
 8005446:	e00e      	b.n	8005466 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f9b3 	bl	80057b4 <USBD_CtlSendStatus>
      break;
 800544e:	e00a      	b.n	8005466 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f8e5 	bl	8005622 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <USBD_SetConfig+0x118>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff f9d2 	bl	8004808 <USBD_ClrClassConfig>
      break;
 8005464:	bf00      	nop
    }
  }
}
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	200001bc 	.word	0x200001bc

08005470 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	88db      	ldrh	r3, [r3, #6]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d004      	beq.n	800548c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f8cc 	bl	8005622 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800548a:	e021      	b.n	80054d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005492:	2b01      	cmp	r3, #1
 8005494:	db17      	blt.n	80054c6 <USBD_GetConfig+0x56>
 8005496:	2b02      	cmp	r3, #2
 8005498:	dd02      	ble.n	80054a0 <USBD_GetConfig+0x30>
 800549a:	2b03      	cmp	r3, #3
 800549c:	d00b      	beq.n	80054b6 <USBD_GetConfig+0x46>
 800549e:	e012      	b.n	80054c6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3308      	adds	r3, #8
 80054aa:	2201      	movs	r2, #1
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f922 	bl	80056f8 <USBD_CtlSendData>
      break;
 80054b4:	e00c      	b.n	80054d0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3304      	adds	r3, #4
 80054ba:	2201      	movs	r2, #1
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f91a 	bl	80056f8 <USBD_CtlSendData>
      break;
 80054c4:	e004      	b.n	80054d0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80054c6:	6839      	ldr	r1, [r7, #0]
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f8aa 	bl	8005622 <USBD_CtlError>
      break;
 80054ce:	bf00      	nop
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80054e8:	3b01      	subs	r3, #1
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d81e      	bhi.n	800552c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	88db      	ldrh	r3, [r3, #6]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d004      	beq.n	8005500 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f892 	bl	8005622 <USBD_CtlError>
      break;
 80054fe:	e01a      	b.n	8005536 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f043 0202 	orr.w	r2, r3, #2
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	330c      	adds	r3, #12
 8005520:	2202      	movs	r2, #2
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f8e7 	bl	80056f8 <USBD_CtlSendData>
    break;
 800552a:	e004      	b.n	8005536 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f877 	bl	8005622 <USBD_CtlError>
    break;
 8005534:	bf00      	nop
  }
}
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	885b      	ldrh	r3, [r3, #2]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d106      	bne.n	800555e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f92b 	bl	80057b4 <USBD_CtlSendStatus>
  }

}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005576:	3b01      	subs	r3, #1
 8005578:	2b02      	cmp	r3, #2
 800557a:	d80b      	bhi.n	8005594 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	885b      	ldrh	r3, [r3, #2]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d10c      	bne.n	800559e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f911 	bl	80057b4 <USBD_CtlSendStatus>
    }
    break;
 8005592:	e004      	b.n	800559e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8005594:	6839      	ldr	r1, [r7, #0]
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f843 	bl	8005622 <USBD_CtlError>
    break;
 800559c:	e000      	b.n	80055a0 <USBD_ClrFeature+0x3a>
    break;
 800559e:	bf00      	nop
  }
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781a      	ldrb	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	785a      	ldrb	r2, [r3, #1]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	3302      	adds	r3, #2
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	3303      	adds	r3, #3
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	b29a      	uxth	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	3304      	adds	r3, #4
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	3305      	adds	r3, #5
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	4413      	add	r3, r2
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	3306      	adds	r3, #6
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	b29a      	uxth	r2, r3
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	3307      	adds	r3, #7
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	b29b      	uxth	r3, r3
 800560e:	4413      	add	r3, r2
 8005610:	b29a      	uxth	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	80da      	strh	r2, [r3, #6]

}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800562c:	2180      	movs	r1, #128	; 0x80
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fdc6 	bl	80061c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005634:	2100      	movs	r1, #0
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fdc2 	bl	80061c0 <USBD_LL_StallEP>
}
 800563c:	bf00      	nop
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d032      	beq.n	80056c0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f834 	bl	80056c8 <USBD_GetLen>
 8005660:	4603      	mov	r3, r0
 8005662:	3301      	adds	r3, #1
 8005664:	b29b      	uxth	r3, r3
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	75fa      	strb	r2, [r7, #23]
 8005674:	461a      	mov	r2, r3
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4413      	add	r3, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	7812      	ldrb	r2, [r2, #0]
 800567e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	75fa      	strb	r2, [r7, #23]
 8005686:	461a      	mov	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4413      	add	r3, r2
 800568c:	2203      	movs	r2, #3
 800568e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005690:	e012      	b.n	80056b8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	60fa      	str	r2, [r7, #12]
 8005698:	7dfa      	ldrb	r2, [r7, #23]
 800569a:	1c51      	adds	r1, r2, #1
 800569c:	75f9      	strb	r1, [r7, #23]
 800569e:	4611      	mov	r1, r2
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	440a      	add	r2, r1
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	75fa      	strb	r2, [r7, #23]
 80056ae:	461a      	mov	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4413      	add	r3, r2
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e8      	bne.n	8005692 <USBD_GetString+0x4e>
    }
  }
}
 80056c0:	bf00      	nop
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80056d4:	e005      	b.n	80056e2 <USBD_GetLen+0x1a>
    {
        len++;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	3301      	adds	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
        buf++;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3301      	adds	r3, #1
 80056e0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f5      	bne.n	80056d6 <USBD_GetLen+0xe>
    }

    return len;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2202      	movs	r2, #2
 800570a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	2100      	movs	r1, #0
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fe1b 	bl	800635c <USBD_LL_Transmit>

  return USBD_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	2100      	movs	r1, #0
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 fe09 	bl	800635c <USBD_LL_Transmit>

  return USBD_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2203      	movs	r2, #3
 8005766:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800576a:	88fa      	ldrh	r2, [r7, #6]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	2100      	movs	r1, #0
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fe25 	bl	80063d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	2100      	movs	r1, #0
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fe13 	bl	80063d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2204      	movs	r2, #4
 80057c0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80057c4:	2300      	movs	r3, #0
 80057c6:	2200      	movs	r2, #0
 80057c8:	2100      	movs	r1, #0
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fdc6 	bl	800635c <USBD_LL_Transmit>

  return USBD_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2205      	movs	r2, #5
 80057e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80057ea:	2300      	movs	r3, #0
 80057ec:	2200      	movs	r2, #0
 80057ee:	2100      	movs	r1, #0
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fded 	bl	80063d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005800:	b590      	push	{r4, r7, lr}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005806:	f7fa fcdf 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800580a:	f000 f8bf 	bl	800598c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800580e:	f000 f945 	bl	8005a9c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8005812:	f000 fa4b 	bl	8005cac <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(USBDatainReady == SET)
 8005816:	4b56      	ldr	r3, [pc, #344]	; (8005970 <main+0x170>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d134      	bne.n	8005888 <main+0x88>
	  {
		  if(USB_RX_Buffer[1])
 800581e:	4b55      	ldr	r3, [pc, #340]	; (8005974 <main+0x174>)
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <main+0x2c>
			  LED_Status = SET;
 8005826:	2301      	movs	r3, #1
 8005828:	71fb      	strb	r3, [r7, #7]
 800582a:	e001      	b.n	8005830 <main+0x30>
		  else
			  LED_Status = RESET;
 800582c:	2300      	movs	r3, #0
 800582e:	71fb      	strb	r3, [r7, #7]

		  switch(USB_RX_Buffer[0] & 0x3)
 8005830:	4b50      	ldr	r3, [pc, #320]	; (8005974 <main+0x174>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	2b01      	cmp	r3, #1
 800583a:	d002      	beq.n	8005842 <main+0x42>
 800583c:	2b02      	cmp	r3, #2
 800583e:	d00f      	beq.n	8005860 <main+0x60>
		  	  		  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
  	  	  	  	  break;
/*		  case 3: HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_SET);
  	  	  	  	  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_SET);
*/
		  default: break;
 8005840:	e01f      	b.n	8005882 <main+0x82>
		  case 1: if(LED_Status == SET)
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d105      	bne.n	8005854 <main+0x54>
			  	  	  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_SET);
 8005848:	2201      	movs	r2, #1
 800584a:	2104      	movs	r1, #4
 800584c:	484a      	ldr	r0, [pc, #296]	; (8005978 <main+0x178>)
 800584e:	f7fb f81f 	bl	8000890 <HAL_GPIO_WritePin>
  	  	  	  	  break;
 8005852:	e016      	b.n	8005882 <main+0x82>
		  	  		  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8005854:	2200      	movs	r2, #0
 8005856:	2104      	movs	r1, #4
 8005858:	4847      	ldr	r0, [pc, #284]	; (8005978 <main+0x178>)
 800585a:	f7fb f819 	bl	8000890 <HAL_GPIO_WritePin>
  	  	  	  	  break;
 800585e:	e010      	b.n	8005882 <main+0x82>
		  case 2: if(LED_Status == SET)
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d106      	bne.n	8005874 <main+0x74>
			  	  	  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_SET);
 8005866:	2201      	movs	r2, #1
 8005868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800586c:	4843      	ldr	r0, [pc, #268]	; (800597c <main+0x17c>)
 800586e:	f7fb f80f 	bl	8000890 <HAL_GPIO_WritePin>
  	  	  	  	  break;
 8005872:	e005      	b.n	8005880 <main+0x80>
		  	  		  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8005874:	2200      	movs	r2, #0
 8005876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800587a:	4840      	ldr	r0, [pc, #256]	; (800597c <main+0x17c>)
 800587c:	f7fb f808 	bl	8000890 <HAL_GPIO_WritePin>
  	  	  	  	  break;
 8005880:	bf00      	nop
		  }

		  USBDatainReady = RESET;
 8005882:	4b3b      	ldr	r3, [pc, #236]	; (8005970 <main+0x170>)
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
	  }



	  USB_TX_Buffer[1] = HAL_GPIO_ReadPin(JOY_CENTER_GPIO_Port, JOY_CENTER_Pin);
 8005888:	2101      	movs	r1, #1
 800588a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800588e:	f7fa ffe7 	bl	8000860 <HAL_GPIO_ReadPin>
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	4b3a      	ldr	r3, [pc, #232]	; (8005980 <main+0x180>)
 8005898:	705a      	strb	r2, [r3, #1]
	  USB_TX_Buffer[2] = HAL_GPIO_ReadPin(JOY_LEFT_GPIO_Port, JOY_LEFT_Pin);
 800589a:	2102      	movs	r1, #2
 800589c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058a0:	f7fa ffde 	bl	8000860 <HAL_GPIO_ReadPin>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	4b35      	ldr	r3, [pc, #212]	; (8005980 <main+0x180>)
 80058aa:	709a      	strb	r2, [r3, #2]
	  USB_TX_Buffer[3] = HAL_GPIO_ReadPin(JOY_RIGHT_GPIO_Port, JOY_RIGHT_Pin);
 80058ac:	2104      	movs	r1, #4
 80058ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058b2:	f7fa ffd5 	bl	8000860 <HAL_GPIO_ReadPin>
 80058b6:	4603      	mov	r3, r0
 80058b8:	461a      	mov	r2, r3
 80058ba:	4b31      	ldr	r3, [pc, #196]	; (8005980 <main+0x180>)
 80058bc:	70da      	strb	r2, [r3, #3]
	  USB_TX_Buffer[4] = HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin);
 80058be:	2108      	movs	r1, #8
 80058c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058c4:	f7fa ffcc 	bl	8000860 <HAL_GPIO_ReadPin>
 80058c8:	4603      	mov	r3, r0
 80058ca:	461a      	mov	r2, r3
 80058cc:	4b2c      	ldr	r3, [pc, #176]	; (8005980 <main+0x180>)
 80058ce:	711a      	strb	r2, [r3, #4]
	  USB_TX_Buffer[5] = HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin);
 80058d0:	2120      	movs	r1, #32
 80058d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058d6:	f7fa ffc3 	bl	8000860 <HAL_GPIO_ReadPin>
 80058da:	4603      	mov	r3, r0
 80058dc:	461a      	mov	r2, r3
 80058de:	4b28      	ldr	r3, [pc, #160]	; (8005980 <main+0x180>)
 80058e0:	715a      	strb	r2, [r3, #5]
	  USB_TX_Buffer[6] = HAL_GPIO_ReadPin(LD_R_GPIO_Port, LD_R_Pin) | HAL_GPIO_ReadPin(LD_G_GPIO_Port, LD_G_Pin) << 1;
 80058e2:	2104      	movs	r1, #4
 80058e4:	4824      	ldr	r0, [pc, #144]	; (8005978 <main+0x178>)
 80058e6:	f7fa ffbb 	bl	8000860 <HAL_GPIO_ReadPin>
 80058ea:	4603      	mov	r3, r0
 80058ec:	b25c      	sxtb	r4, r3
 80058ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058f2:	4822      	ldr	r0, [pc, #136]	; (800597c <main+0x17c>)
 80058f4:	f7fa ffb4 	bl	8000860 <HAL_GPIO_ReadPin>
 80058f8:	4603      	mov	r3, r0
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	b25b      	sxtb	r3, r3
 80058fe:	4323      	orrs	r3, r4
 8005900:	b25b      	sxtb	r3, r3
 8005902:	b2da      	uxtb	r2, r3
 8005904:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <main+0x180>)
 8005906:	719a      	strb	r2, [r3, #6]
	  if (USB_TX_Buffer[1] || USB_TX_Buffer[2] || USB_TX_Buffer[3] || USB_TX_Buffer[4] || USB_TX_Buffer[5] || USB_TX_Buffer[6])
 8005908:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <main+0x180>)
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d113      	bne.n	8005938 <main+0x138>
 8005910:	4b1b      	ldr	r3, [pc, #108]	; (8005980 <main+0x180>)
 8005912:	789b      	ldrb	r3, [r3, #2]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10f      	bne.n	8005938 <main+0x138>
 8005918:	4b19      	ldr	r3, [pc, #100]	; (8005980 <main+0x180>)
 800591a:	78db      	ldrb	r3, [r3, #3]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <main+0x138>
 8005920:	4b17      	ldr	r3, [pc, #92]	; (8005980 <main+0x180>)
 8005922:	791b      	ldrb	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d107      	bne.n	8005938 <main+0x138>
 8005928:	4b15      	ldr	r3, [pc, #84]	; (8005980 <main+0x180>)
 800592a:	795b      	ldrb	r3, [r3, #5]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <main+0x138>
 8005930:	4b13      	ldr	r3, [pc, #76]	; (8005980 <main+0x180>)
 8005932:	799b      	ldrb	r3, [r3, #6]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d006      	beq.n	8005946 <main+0x146>
	  {
		  USB_TX_Buffer[0] = 4;	//   REPORT_ID (4)
 8005938:	4b11      	ldr	r3, [pc, #68]	; (8005980 <main+0x180>)
 800593a:	2204      	movs	r2, #4
 800593c:	701a      	strb	r2, [r3, #0]
		  USBDataOutReady = SET;
 800593e:	4b11      	ldr	r3, [pc, #68]	; (8005984 <main+0x184>)
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e002      	b.n	800594c <main+0x14c>
	  }
	  else
		  USBDataOutReady = RESET;
 8005946:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <main+0x184>)
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]

	  USB_TX_Buffer[7] = 0x55;
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <main+0x180>)
 800594e:	2255      	movs	r2, #85	; 0x55
 8005950:	71da      	strb	r2, [r3, #7]
	  USB_TX_Buffer[8] = 0xAA;
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <main+0x180>)
 8005954:	22aa      	movs	r2, #170	; 0xaa
 8005956:	721a      	strb	r2, [r3, #8]

	  if(USBDataOutReady == SET)
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <main+0x184>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	f47f af5a 	bne.w	8005816 <main+0x16>
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,USB_TX_Buffer,ARRAY2HOST+1); // To send usb buffer to PC
 8005962:	2209      	movs	r2, #9
 8005964:	4906      	ldr	r1, [pc, #24]	; (8005980 <main+0x180>)
 8005966:	4808      	ldr	r0, [pc, #32]	; (8005988 <main+0x188>)
 8005968:	f7fe fe04 	bl	8004574 <USBD_CUSTOM_HID_SendReport>
	  if(USBDatainReady == SET)
 800596c:	e753      	b.n	8005816 <main+0x16>
 800596e:	bf00      	nop
 8005970:	200001bd 	.word	0x200001bd
 8005974:	2000021c 	.word	0x2000021c
 8005978:	48000400 	.word	0x48000400
 800597c:	48001000 	.word	0x48001000
 8005980:	2000025c 	.word	0x2000025c
 8005984:	200001be 	.word	0x200001be
 8005988:	2000029c 	.word	0x2000029c

0800598c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b0b8      	sub	sp, #224	; 0xe0
 8005990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005992:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005996:	2244      	movs	r2, #68	; 0x44
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f000 ff70 	bl	8006880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	605a      	str	r2, [r3, #4]
 80059aa:	609a      	str	r2, [r3, #8]
 80059ac:	60da      	str	r2, [r3, #12]
 80059ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80059b0:	463b      	mov	r3, r7
 80059b2:	2288      	movs	r2, #136	; 0x88
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 ff62 	bl	8006880 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80059bc:	2310      	movs	r3, #16
 80059be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80059ce:	2360      	movs	r3, #96	; 0x60
 80059d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059d4:	2302      	movs	r3, #2
 80059d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80059da:	2301      	movs	r3, #1
 80059dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80059e0:	2301      	movs	r3, #1
 80059e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 80059e6:	2314      	movs	r3, #20
 80059e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80059ec:	2307      	movs	r3, #7
 80059ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80059f2:	2302      	movs	r3, #2
 80059f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80059f8:	2302      	movs	r3, #2
 80059fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fc f836 	bl	8001a74 <HAL_RCC_OscConfig>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8005a0e:	f000 f8b3 	bl	8005b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a12:	230f      	movs	r3, #15
 8005a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a24:	2300      	movs	r3, #0
 8005a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005a30:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005a34:	2102      	movs	r1, #2
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fc fbcc 	bl	80021d4 <HAL_RCC_ClockConfig>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005a42:	f000 f899 	bl	8005b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a4a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8005a4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005a50:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8005a52:	2301      	movs	r3, #1
 8005a54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8005a56:	2301      	movs	r3, #1
 8005a58:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8005a5a:	2318      	movs	r3, #24
 8005a5c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8005a5e:	2307      	movs	r3, #7
 8005a60:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8005a62:	2302      	movs	r3, #2
 8005a64:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8005a66:	2302      	movs	r3, #2
 8005a68:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8005a6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a6e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a70:	463b      	mov	r3, r7
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fc fd86 	bl	8002584 <HAL_RCCEx_PeriphCLKConfig>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8005a7e:	f000 f87b 	bl	8005b78 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005a82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005a86:	f7fb ff8f 	bl	80019a8 <HAL_PWREx_ControlVoltageScaling>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8005a90:	f000 f872 	bl	8005b78 <Error_Handler>
  }
}
 8005a94:	bf00      	nop
 8005a96:	37e0      	adds	r7, #224	; 0xe0
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aa2:	f107 030c 	add.w	r3, r7, #12
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	605a      	str	r2, [r3, #4]
 8005aac:	609a      	str	r2, [r3, #8]
 8005aae:	60da      	str	r2, [r3, #12]
 8005ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ab2:	4b2e      	ldr	r3, [pc, #184]	; (8005b6c <MX_GPIO_Init+0xd0>)
 8005ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab6:	4a2d      	ldr	r2, [pc, #180]	; (8005b6c <MX_GPIO_Init+0xd0>)
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005abe:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <MX_GPIO_Init+0xd0>)
 8005ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aca:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <MX_GPIO_Init+0xd0>)
 8005acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ace:	4a27      	ldr	r2, [pc, #156]	; (8005b6c <MX_GPIO_Init+0xd0>)
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ad6:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <MX_GPIO_Init+0xd0>)
 8005ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	607b      	str	r3, [r7, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005ae2:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <MX_GPIO_Init+0xd0>)
 8005ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae6:	4a21      	ldr	r2, [pc, #132]	; (8005b6c <MX_GPIO_Init+0xd0>)
 8005ae8:	f043 0310 	orr.w	r3, r3, #16
 8005aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aee:	4b1f      	ldr	r3, [pc, #124]	; (8005b6c <MX_GPIO_Init+0xd0>)
 8005af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 8005afa:	2200      	movs	r2, #0
 8005afc:	2104      	movs	r1, #4
 8005afe:	481c      	ldr	r0, [pc, #112]	; (8005b70 <MX_GPIO_Init+0xd4>)
 8005b00:	f7fa fec6 	bl	8000890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 8005b04:	2200      	movs	r2, #0
 8005b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b0a:	481a      	ldr	r0, [pc, #104]	; (8005b74 <MX_GPIO_Init+0xd8>)
 8005b0c:	f7fa fec0 	bl	8000890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8005b10:	232f      	movs	r3, #47	; 0x2f
 8005b12:	60fb      	str	r3, [r7, #12]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b1c:	f107 030c 	add.w	r3, r7, #12
 8005b20:	4619      	mov	r1, r3
 8005b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b26:	f7fa fcf3 	bl	8000510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8005b2a:	2304      	movs	r3, #4
 8005b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	4619      	mov	r1, r3
 8005b40:	480b      	ldr	r0, [pc, #44]	; (8005b70 <MX_GPIO_Init+0xd4>)
 8005b42:	f7fa fce5 	bl	8000510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8005b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8005b58:	f107 030c 	add.w	r3, r7, #12
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4805      	ldr	r0, [pc, #20]	; (8005b74 <MX_GPIO_Init+0xd8>)
 8005b60:	f7fa fcd6 	bl	8000510 <HAL_GPIO_Init>

}
 8005b64:	bf00      	nop
 8005b66:	3720      	adds	r7, #32
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	48000400 	.word	0x48000400
 8005b74:	48001000 	.word	0x48001000

08005b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005b7c:	bf00      	nop
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <HAL_MspInit+0x44>)
 8005b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b92:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <HAL_MspInit+0x44>)
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	6613      	str	r3, [r2, #96]	; 0x60
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <HAL_MspInit+0x44>)
 8005b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	607b      	str	r3, [r7, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_MspInit+0x44>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	4a08      	ldr	r2, [pc, #32]	; (8005bcc <HAL_MspInit+0x44>)
 8005bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8005bb2:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <HAL_MspInit+0x44>)
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000

08005bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bde:	b480      	push	{r7}
 8005be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005be2:	e7fe      	b.n	8005be2 <HardFault_Handler+0x4>

08005be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005be8:	e7fe      	b.n	8005be8 <MemManage_Handler+0x4>

08005bea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bea:	b480      	push	{r7}
 8005bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bee:	e7fe      	b.n	8005bee <BusFault_Handler+0x4>

08005bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bf4:	e7fe      	b.n	8005bf4 <UsageFault_Handler+0x4>

08005bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bfa:	bf00      	nop
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c08:	bf00      	nop
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c16:	bf00      	nop
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c24:	f7fa fb22 	bl	800026c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c28:	bf00      	nop
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005c30:	4802      	ldr	r0, [pc, #8]	; (8005c3c <OTG_FS_IRQHandler+0x10>)
 8005c32:	f7fa ff98 	bl	8000b66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000538 	.word	0x20000538

08005c40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c44:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <SystemInit+0x64>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4a:	4a16      	ldr	r2, [pc, #88]	; (8005ca4 <SystemInit+0x64>)
 8005c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005c54:	4b14      	ldr	r3, [pc, #80]	; (8005ca8 <SystemInit+0x68>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a13      	ldr	r2, [pc, #76]	; (8005ca8 <SystemInit+0x68>)
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005c60:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <SystemInit+0x68>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <SystemInit+0x68>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a0f      	ldr	r2, [pc, #60]	; (8005ca8 <SystemInit+0x68>)
 8005c6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005c70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005c74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <SystemInit+0x68>)
 8005c78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <SystemInit+0x68>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a09      	ldr	r2, [pc, #36]	; (8005ca8 <SystemInit+0x68>)
 8005c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <SystemInit+0x68>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c90:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <SystemInit+0x64>)
 8005c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c96:	609a      	str	r2, [r3, #8]
#endif
}
 8005c98:	bf00      	nop
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	e000ed00 	.word	0xe000ed00
 8005ca8:	40021000 	.word	0x40021000

08005cac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	4912      	ldr	r1, [pc, #72]	; (8005cfc <MX_USB_DEVICE_Init+0x50>)
 8005cb4:	4812      	ldr	r0, [pc, #72]	; (8005d00 <MX_USB_DEVICE_Init+0x54>)
 8005cb6:	f7fe fd2c 	bl	8004712 <USBD_Init>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005cc0:	f7ff ff5a 	bl	8005b78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8005cc4:	490f      	ldr	r1, [pc, #60]	; (8005d04 <MX_USB_DEVICE_Init+0x58>)
 8005cc6:	480e      	ldr	r0, [pc, #56]	; (8005d00 <MX_USB_DEVICE_Init+0x54>)
 8005cc8:	f7fe fd4e 	bl	8004768 <USBD_RegisterClass>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005cd2:	f7ff ff51 	bl	8005b78 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8005cd6:	490c      	ldr	r1, [pc, #48]	; (8005d08 <MX_USB_DEVICE_Init+0x5c>)
 8005cd8:	4809      	ldr	r0, [pc, #36]	; (8005d00 <MX_USB_DEVICE_Init+0x54>)
 8005cda:	f7fe fd03 	bl	80046e4 <USBD_CUSTOM_HID_RegisterInterface>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005ce4:	f7ff ff48 	bl	8005b78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005ce8:	4805      	ldr	r0, [pc, #20]	; (8005d00 <MX_USB_DEVICE_Init+0x54>)
 8005cea:	f7fe fd57 	bl	800479c <USBD_Start>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d001      	beq.n	8005cf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005cf4:	f7ff ff40 	bl	8005b78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005cf8:	bf00      	nop
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20000140 	.word	0x20000140
 8005d00:	2000029c 	.word	0x2000029c
 8005d04:	20000008 	.word	0x20000008
 8005d08:	20000130 	.word	0x20000130

08005d0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	; 0x28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d14:	f107 0314 	add.w	r3, r7, #20
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	609a      	str	r2, [r3, #8]
 8005d20:	60da      	str	r2, [r3, #12]
 8005d22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d2c:	d14e      	bne.n	8005dcc <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d2e:	4b29      	ldr	r3, [pc, #164]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d32:	4a28      	ldr	r2, [pc, #160]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d3a:	4b26      	ldr	r3, [pc, #152]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005d46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d54:	2303      	movs	r3, #3
 8005d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005d58:	230a      	movs	r3, #10
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d5c:	f107 0314 	add.w	r3, r7, #20
 8005d60:	4619      	mov	r1, r3
 8005d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d66:	f7fa fbd3 	bl	8000510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005d6a:	4b1a      	ldr	r3, [pc, #104]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6e:	4a19      	ldr	r2, [pc, #100]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d76:	4b17      	ldr	r3, [pc, #92]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d82:	4b14      	ldr	r3, [pc, #80]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d114      	bne.n	8005db8 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d8e:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d92:	4a10      	ldr	r2, [pc, #64]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d98:	6593      	str	r3, [r2, #88]	; 0x58
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da2:	60bb      	str	r3, [r7, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8005da6:	f7fb fe55 	bl	8001a54 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005daa:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dae:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <HAL_PCD_MspInit+0xc8>)
 8005db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db4:	6593      	str	r3, [r2, #88]	; 0x58
 8005db6:	e001      	b.n	8005dbc <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8005db8:	f7fb fe4c 	bl	8001a54 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	2043      	movs	r0, #67	; 0x43
 8005dc2:	f7fa fb6e 	bl	80004a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005dc6:	2043      	movs	r0, #67	; 0x43
 8005dc8:	f7fa fb87 	bl	80004da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005dcc:	bf00      	nop
 8005dce:	3728      	adds	r7, #40	; 0x28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40021000 	.word	0x40021000

08005dd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f7fe fd1d 	bl	800482e <USBD_LL_SetupStage>
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	4619      	mov	r1, r3
 8005e26:	f7fe fd4d 	bl	80048c4 <USBD_LL_DataOutStage>
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b082      	sub	sp, #8
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	1a9b      	subs	r3, r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	3348      	adds	r3, #72	; 0x48
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	f7fe fda4 	bl	80049a6 <USBD_LL_DataInStage>
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b082      	sub	sp, #8
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe feb2 	bl	8004bde <USBD_LL_SOF>
}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d001      	beq.n	8005e9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005e96:	f7ff fe6f 	bl	8005b78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ea0:	7bfa      	ldrb	r2, [r7, #15]
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe fe64 	bl	8004b72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe fe1d 	bl	8004af0 <USBD_LL_Reset>
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe fe53 	bl	8004b92 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <HAL_PCD_SuspendCallback+0x48>)
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	4a03      	ldr	r2, [pc, #12]	; (8005f08 <HAL_PCD_SuspendCallback+0x48>)
 8005efa:	f043 0306 	orr.w	r3, r3, #6
 8005efe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	e000ed00 	.word	0xe000ed00

08005f0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f34:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <HAL_PCD_ResumeCallback+0x4c>)
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	4a07      	ldr	r2, [pc, #28]	; (8005f58 <HAL_PCD_ResumeCallback+0x4c>)
 8005f3a:	f023 0306 	bic.w	r3, r3, #6
 8005f3e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8005f40:	f000 fae6 	bl	8006510 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fe36 	bl	8004bbc <USBD_LL_Resume>
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	4611      	mov	r1, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fe5a 	bl	8004c2c <USBD_LL_IsoOUTIncomplete>
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fe3b 	bl	8004c12 <USBD_LL_IsoINIncomplete>
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fe47 	bl	8004c46 <USBD_LL_DevConnected>
}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe fe44 	bl	8004c5c <USBD_LL_DevDisconnected>
}
 8005fd4:	bf00      	nop
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d13c      	bne.n	8006066 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005fec:	4a20      	ldr	r2, [pc, #128]	; (8006070 <USBD_LL_Init+0x94>)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	; (8006070 <USBD_LL_Init+0x94>)
 8005ff8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005ffc:	4b1c      	ldr	r3, [pc, #112]	; (8006070 <USBD_LL_Init+0x94>)
 8005ffe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006002:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006004:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <USBD_LL_Init+0x94>)
 8006006:	2206      	movs	r2, #6
 8006008:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800600a:	4b19      	ldr	r3, [pc, #100]	; (8006070 <USBD_LL_Init+0x94>)
 800600c:	2202      	movs	r2, #2
 800600e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006010:	4b17      	ldr	r3, [pc, #92]	; (8006070 <USBD_LL_Init+0x94>)
 8006012:	2202      	movs	r2, #2
 8006014:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006016:	4b16      	ldr	r3, [pc, #88]	; (8006070 <USBD_LL_Init+0x94>)
 8006018:	2200      	movs	r2, #0
 800601a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800601c:	4b14      	ldr	r3, [pc, #80]	; (8006070 <USBD_LL_Init+0x94>)
 800601e:	2200      	movs	r2, #0
 8006020:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006022:	4b13      	ldr	r3, [pc, #76]	; (8006070 <USBD_LL_Init+0x94>)
 8006024:	2200      	movs	r2, #0
 8006026:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006028:	4b11      	ldr	r3, [pc, #68]	; (8006070 <USBD_LL_Init+0x94>)
 800602a:	2200      	movs	r2, #0
 800602c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800602e:	4b10      	ldr	r3, [pc, #64]	; (8006070 <USBD_LL_Init+0x94>)
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006034:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <USBD_LL_Init+0x94>)
 8006036:	2200      	movs	r2, #0
 8006038:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800603a:	480d      	ldr	r0, [pc, #52]	; (8006070 <USBD_LL_Init+0x94>)
 800603c:	f7fa fc40 	bl	80008c0 <HAL_PCD_Init>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006046:	f7ff fd97 	bl	8005b78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	4808      	ldr	r0, [pc, #32]	; (8006070 <USBD_LL_Init+0x94>)
 800604e:	f7fb fc68 	bl	8001922 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006052:	2240      	movs	r2, #64	; 0x40
 8006054:	2100      	movs	r1, #0
 8006056:	4806      	ldr	r0, [pc, #24]	; (8006070 <USBD_LL_Init+0x94>)
 8006058:	f7fb fc1c 	bl	8001894 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800605c:	2280      	movs	r2, #128	; 0x80
 800605e:	2101      	movs	r1, #1
 8006060:	4803      	ldr	r0, [pc, #12]	; (8006070 <USBD_LL_Init+0x94>)
 8006062:	f7fb fc17 	bl	8001894 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20000538 	.word	0x20000538

08006074 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800608a:	4618      	mov	r0, r3
 800608c:	f7fa fd3c 	bl	8000b08 <HAL_PCD_Start>
 8006090:	4603      	mov	r3, r0
 8006092:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	2b03      	cmp	r3, #3
 8006098:	d816      	bhi.n	80060c8 <USBD_LL_Start+0x54>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <USBD_LL_Start+0x2c>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060b7 	.word	0x080060b7
 80060a8:	080060bd 	.word	0x080060bd
 80060ac:	080060c3 	.word	0x080060c3
    case HAL_OK :
      usb_status = USBD_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
    break;
 80060b4:	e00b      	b.n	80060ce <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80060b6:	2302      	movs	r3, #2
 80060b8:	73fb      	strb	r3, [r7, #15]
    break;
 80060ba:	e008      	b.n	80060ce <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
    break;
 80060c0:	e005      	b.n	80060ce <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80060c2:	2302      	movs	r3, #2
 80060c4:	73fb      	strb	r3, [r7, #15]
    break;
 80060c6:	e002      	b.n	80060ce <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80060c8:	2302      	movs	r3, #2
 80060ca:	73fb      	strb	r3, [r7, #15]
    break;
 80060cc:	bf00      	nop
  }
  return usb_status;
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	4608      	mov	r0, r1
 80060e2:	4611      	mov	r1, r2
 80060e4:	461a      	mov	r2, r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	70fb      	strb	r3, [r7, #3]
 80060ea:	460b      	mov	r3, r1
 80060ec:	70bb      	strb	r3, [r7, #2]
 80060ee:	4613      	mov	r3, r2
 80060f0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006100:	78bb      	ldrb	r3, [r7, #2]
 8006102:	883a      	ldrh	r2, [r7, #0]
 8006104:	78f9      	ldrb	r1, [r7, #3]
 8006106:	f7fb f8d5 	bl	80012b4 <HAL_PCD_EP_Open>
 800610a:	4603      	mov	r3, r0
 800610c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	2b03      	cmp	r3, #3
 8006112:	d817      	bhi.n	8006144 <USBD_LL_OpenEP+0x6c>
 8006114:	a201      	add	r2, pc, #4	; (adr r2, 800611c <USBD_LL_OpenEP+0x44>)
 8006116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611a:	bf00      	nop
 800611c:	0800612d 	.word	0x0800612d
 8006120:	08006133 	.word	0x08006133
 8006124:	08006139 	.word	0x08006139
 8006128:	0800613f 	.word	0x0800613f
    case HAL_OK :
      usb_status = USBD_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	73fb      	strb	r3, [r7, #15]
    break;
 8006130:	e00b      	b.n	800614a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006132:	2302      	movs	r3, #2
 8006134:	73fb      	strb	r3, [r7, #15]
    break;
 8006136:	e008      	b.n	800614a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006138:	2301      	movs	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
    break;
 800613c:	e005      	b.n	800614a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800613e:	2302      	movs	r3, #2
 8006140:	73fb      	strb	r3, [r7, #15]
    break;
 8006142:	e002      	b.n	800614a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006144:	2302      	movs	r3, #2
 8006146:	73fb      	strb	r3, [r7, #15]
    break;
 8006148:	bf00      	nop
  }
  return usb_status;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800616e:	78fa      	ldrb	r2, [r7, #3]
 8006170:	4611      	mov	r1, r2
 8006172:	4618      	mov	r0, r3
 8006174:	f7fb f906 	bl	8001384 <HAL_PCD_EP_Close>
 8006178:	4603      	mov	r3, r0
 800617a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	2b03      	cmp	r3, #3
 8006180:	d816      	bhi.n	80061b0 <USBD_LL_CloseEP+0x5c>
 8006182:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <USBD_LL_CloseEP+0x34>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	08006199 	.word	0x08006199
 800618c:	0800619f 	.word	0x0800619f
 8006190:	080061a5 	.word	0x080061a5
 8006194:	080061ab 	.word	0x080061ab
    case HAL_OK :
      usb_status = USBD_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
    break;
 800619c:	e00b      	b.n	80061b6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800619e:	2302      	movs	r3, #2
 80061a0:	73fb      	strb	r3, [r7, #15]
    break;
 80061a2:	e008      	b.n	80061b6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80061a4:	2301      	movs	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
    break;
 80061a8:	e005      	b.n	80061b6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80061aa:	2302      	movs	r3, #2
 80061ac:	73fb      	strb	r3, [r7, #15]
    break;
 80061ae:	e002      	b.n	80061b6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80061b0:	2302      	movs	r3, #2
 80061b2:	73fb      	strb	r3, [r7, #15]
    break;
 80061b4:	bf00      	nop
  }
  return usb_status;  
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80061da:	78fa      	ldrb	r2, [r7, #3]
 80061dc:	4611      	mov	r1, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fb f995 	bl	800150e <HAL_PCD_EP_SetStall>
 80061e4:	4603      	mov	r3, r0
 80061e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80061e8:	7bbb      	ldrb	r3, [r7, #14]
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d816      	bhi.n	800621c <USBD_LL_StallEP+0x5c>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <USBD_LL_StallEP+0x34>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	08006205 	.word	0x08006205
 80061f8:	0800620b 	.word	0x0800620b
 80061fc:	08006211 	.word	0x08006211
 8006200:	08006217 	.word	0x08006217
    case HAL_OK :
      usb_status = USBD_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	73fb      	strb	r3, [r7, #15]
    break;
 8006208:	e00b      	b.n	8006222 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800620a:	2302      	movs	r3, #2
 800620c:	73fb      	strb	r3, [r7, #15]
    break;
 800620e:	e008      	b.n	8006222 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
    break;
 8006214:	e005      	b.n	8006222 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006216:	2302      	movs	r3, #2
 8006218:	73fb      	strb	r3, [r7, #15]
    break;
 800621a:	e002      	b.n	8006222 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800621c:	2302      	movs	r3, #2
 800621e:	73fb      	strb	r3, [r7, #15]
    break;
 8006220:	bf00      	nop
  }
  return usb_status;  
 8006222:	7bfb      	ldrb	r3, [r7, #15]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006246:	78fa      	ldrb	r2, [r7, #3]
 8006248:	4611      	mov	r1, r2
 800624a:	4618      	mov	r0, r3
 800624c:	f7fb f9c1 	bl	80015d2 <HAL_PCD_EP_ClrStall>
 8006250:	4603      	mov	r3, r0
 8006252:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006254:	7bbb      	ldrb	r3, [r7, #14]
 8006256:	2b03      	cmp	r3, #3
 8006258:	d816      	bhi.n	8006288 <USBD_LL_ClearStallEP+0x5c>
 800625a:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <USBD_LL_ClearStallEP+0x34>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	08006271 	.word	0x08006271
 8006264:	08006277 	.word	0x08006277
 8006268:	0800627d 	.word	0x0800627d
 800626c:	08006283 	.word	0x08006283
    case HAL_OK :
      usb_status = USBD_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]
    break;
 8006274:	e00b      	b.n	800628e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006276:	2302      	movs	r3, #2
 8006278:	73fb      	strb	r3, [r7, #15]
    break;
 800627a:	e008      	b.n	800628e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
    break;
 8006280:	e005      	b.n	800628e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006282:	2302      	movs	r3, #2
 8006284:	73fb      	strb	r3, [r7, #15]
    break;
 8006286:	e002      	b.n	800628e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006288:	2302      	movs	r3, #2
 800628a:	73fb      	strb	r3, [r7, #15]
    break;
 800628c:	bf00      	nop
  }
  return usb_status; 
 800628e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80062aa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80062ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	da0b      	bge.n	80062cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	333e      	adds	r3, #62	; 0x3e
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	e00b      	b.n	80062e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800630a:	78fa      	ldrb	r2, [r7, #3]
 800630c:	4611      	mov	r1, r2
 800630e:	4618      	mov	r0, r3
 8006310:	f7fa ffab 	bl	800126a <HAL_PCD_SetAddress>
 8006314:	4603      	mov	r3, r0
 8006316:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	2b03      	cmp	r3, #3
 800631c:	d816      	bhi.n	800634c <USBD_LL_SetUSBAddress+0x5c>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <USBD_LL_SetUSBAddress+0x34>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006335 	.word	0x08006335
 8006328:	0800633b 	.word	0x0800633b
 800632c:	08006341 	.word	0x08006341
 8006330:	08006347 	.word	0x08006347
    case HAL_OK :
      usb_status = USBD_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	73fb      	strb	r3, [r7, #15]
    break;
 8006338:	e00b      	b.n	8006352 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800633a:	2302      	movs	r3, #2
 800633c:	73fb      	strb	r3, [r7, #15]
    break;
 800633e:	e008      	b.n	8006352 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006340:	2301      	movs	r3, #1
 8006342:	73fb      	strb	r3, [r7, #15]
    break;
 8006344:	e005      	b.n	8006352 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006346:	2302      	movs	r3, #2
 8006348:	73fb      	strb	r3, [r7, #15]
    break;
 800634a:	e002      	b.n	8006352 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800634c:	2302      	movs	r3, #2
 800634e:	73fb      	strb	r3, [r7, #15]
    break;
 8006350:	bf00      	nop
  }
  return usb_status;  
 8006352:	7bfb      	ldrb	r3, [r7, #15]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	461a      	mov	r2, r3
 8006368:	460b      	mov	r3, r1
 800636a:	72fb      	strb	r3, [r7, #11]
 800636c:	4613      	mov	r3, r2
 800636e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800637e:	893b      	ldrh	r3, [r7, #8]
 8006380:	7af9      	ldrb	r1, [r7, #11]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	f7fb f886 	bl	8001494 <HAL_PCD_EP_Transmit>
 8006388:	4603      	mov	r3, r0
 800638a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800638c:	7dbb      	ldrb	r3, [r7, #22]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d816      	bhi.n	80063c0 <USBD_LL_Transmit+0x64>
 8006392:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <USBD_LL_Transmit+0x3c>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063af 	.word	0x080063af
 80063a0:	080063b5 	.word	0x080063b5
 80063a4:	080063bb 	.word	0x080063bb
    case HAL_OK :
      usb_status = USBD_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	75fb      	strb	r3, [r7, #23]
    break;
 80063ac:	e00b      	b.n	80063c6 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80063ae:	2302      	movs	r3, #2
 80063b0:	75fb      	strb	r3, [r7, #23]
    break;
 80063b2:	e008      	b.n	80063c6 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80063b4:	2301      	movs	r3, #1
 80063b6:	75fb      	strb	r3, [r7, #23]
    break;
 80063b8:	e005      	b.n	80063c6 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063ba:	2302      	movs	r3, #2
 80063bc:	75fb      	strb	r3, [r7, #23]
    break;
 80063be:	e002      	b.n	80063c6 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80063c0:	2302      	movs	r3, #2
 80063c2:	75fb      	strb	r3, [r7, #23]
    break;
 80063c4:	bf00      	nop
  }
  return usb_status;    
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	461a      	mov	r2, r3
 80063dc:	460b      	mov	r3, r1
 80063de:	72fb      	strb	r3, [r7, #11]
 80063e0:	4613      	mov	r3, r2
 80063e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80063f2:	893b      	ldrh	r3, [r7, #8]
 80063f4:	7af9      	ldrb	r1, [r7, #11]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	f7fb f80e 	bl	8001418 <HAL_PCD_EP_Receive>
 80063fc:	4603      	mov	r3, r0
 80063fe:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006400:	7dbb      	ldrb	r3, [r7, #22]
 8006402:	2b03      	cmp	r3, #3
 8006404:	d816      	bhi.n	8006434 <USBD_LL_PrepareReceive+0x64>
 8006406:	a201      	add	r2, pc, #4	; (adr r2, 800640c <USBD_LL_PrepareReceive+0x3c>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	0800641d 	.word	0x0800641d
 8006410:	08006423 	.word	0x08006423
 8006414:	08006429 	.word	0x08006429
 8006418:	0800642f 	.word	0x0800642f
    case HAL_OK :
      usb_status = USBD_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	75fb      	strb	r3, [r7, #23]
    break;
 8006420:	e00b      	b.n	800643a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006422:	2302      	movs	r3, #2
 8006424:	75fb      	strb	r3, [r7, #23]
    break;
 8006426:	e008      	b.n	800643a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006428:	2301      	movs	r3, #1
 800642a:	75fb      	strb	r3, [r7, #23]
    break;
 800642c:	e005      	b.n	800643a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800642e:	2302      	movs	r3, #2
 8006430:	75fb      	strb	r3, [r7, #23]
    break;
 8006432:	e002      	b.n	800643a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8006434:	2302      	movs	r3, #2
 8006436:	75fb      	strb	r3, [r7, #23]
    break;
 8006438:	bf00      	nop
  }
  return usb_status; 
 800643a:	7dfb      	ldrb	r3, [r7, #23]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_PCDEx_LPM_Callback+0x18>
 8006456:	2b01      	cmp	r3, #1
 8006458:	d01f      	beq.n	800649a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800645a:	e03b      	b.n	80064d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006464:	f000 f854 	bl	8006510 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006468:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <HAL_PCDEx_LPM_Callback+0x98>)
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <HAL_PCDEx_LPM_Callback+0x98>)
 800646e:	f023 0306 	bic.w	r3, r3, #6
 8006472:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fb92 	bl	8004bbc <USBD_LL_Resume>
    break;
 8006498:	e01c      	b.n	80064d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fe fb6a 	bl	8004b92 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064c6:	4b05      	ldr	r3, [pc, #20]	; (80064dc <HAL_PCDEx_LPM_Callback+0x98>)
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	4a04      	ldr	r2, [pc, #16]	; (80064dc <HAL_PCDEx_LPM_Callback+0x98>)
 80064cc:	f043 0306 	orr.w	r3, r3, #6
 80064d0:	6113      	str	r3, [r2, #16]
    break;   
 80064d2:	bf00      	nop
}
 80064d4:	bf00      	nop
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	e000ed00 	.word	0xe000ed00

080064e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80064e8:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <USBD_static_malloc+0x18>)
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	200001c0 	.word	0x200001c0

080064fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]

}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006514:	f7ff fa3a 	bl	800598c <SystemClock_Config>
}
 8006518:	bf00      	nop
 800651a:	bd80      	pop	{r7, pc}

0800651c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	hUsbDevice_0 = &hUsbDeviceFS;	// Need for CUSTOM_HID_OutEvent_FS
 8006520:	4b04      	ldr	r3, [pc, #16]	; (8006534 <CUSTOM_HID_Init_FS+0x18>)
 8006522:	4a05      	ldr	r2, [pc, #20]	; (8006538 <CUSTOM_HID_Init_FS+0x1c>)
 8006524:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 8006526:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006528:	4618      	mov	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000940 	.word	0x20000940
 8006538:	2000029c 	.word	0x2000029c

0800653c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006540:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006542:	4618      	mov	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	460a      	mov	r2, r1
 8006556:	71fb      	strb	r3, [r7, #7]
 8006558:	4613      	mov	r3, r2
 800655a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)hUsbDevice_0->pClassData;
 800655c:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <CUSTOM_HID_OutEvent_FS+0x4c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006564:	60bb      	str	r3, [r7, #8]

	  for (uint8_t i = 0; i < ARRAY2ST+1; i++)
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
 800656a:	e008      	b.n	800657e <CUSTOM_HID_OutEvent_FS+0x32>
	  {
	    USB_RX_Buffer[i] = hhid->Report_buf[i]; // To read usb data from PC
 800656c:	7bfa      	ldrb	r2, [r7, #15]
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	5c89      	ldrb	r1, [r1, r2]
 8006574:	4a09      	ldr	r2, [pc, #36]	; (800659c <CUSTOM_HID_OutEvent_FS+0x50>)
 8006576:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t i = 0; i < ARRAY2ST+1; i++)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	3301      	adds	r3, #1
 800657c:	73fb      	strb	r3, [r7, #15]
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d9f3      	bls.n	800656c <CUSTOM_HID_OutEvent_FS+0x20>
	  }
	  USBDatainReady = SET;
 8006584:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <CUSTOM_HID_OutEvent_FS+0x54>)
 8006586:	2201      	movs	r2, #1
 8006588:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800658a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	20000940 	.word	0x20000940
 800659c:	2000021c 	.word	0x2000021c
 80065a0:	200001bd 	.word	0x200001bd

080065a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	6039      	str	r1, [r7, #0]
 80065ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2212      	movs	r2, #18
 80065b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80065b6:	4b03      	ldr	r3, [pc, #12]	; (80065c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	20000160 	.word	0x20000160

080065c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	6039      	str	r1, [r7, #0]
 80065d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2204      	movs	r2, #4
 80065d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80065da:	4b03      	ldr	r3, [pc, #12]	; (80065e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	20000180 	.word	0x20000180

080065ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	6039      	str	r1, [r7, #0]
 80065f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d105      	bne.n	800660a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	4907      	ldr	r1, [pc, #28]	; (8006620 <USBD_FS_ProductStrDescriptor+0x34>)
 8006602:	4808      	ldr	r0, [pc, #32]	; (8006624 <USBD_FS_ProductStrDescriptor+0x38>)
 8006604:	f7ff f81e 	bl	8005644 <USBD_GetString>
 8006608:	e004      	b.n	8006614 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	4904      	ldr	r1, [pc, #16]	; (8006620 <USBD_FS_ProductStrDescriptor+0x34>)
 800660e:	4805      	ldr	r0, [pc, #20]	; (8006624 <USBD_FS_ProductStrDescriptor+0x38>)
 8006610:	f7ff f818 	bl	8005644 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006614:	4b02      	ldr	r3, [pc, #8]	; (8006620 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000944 	.word	0x20000944
 8006624:	080068a8 	.word	0x080068a8

08006628 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	6039      	str	r1, [r7, #0]
 8006632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	4904      	ldr	r1, [pc, #16]	; (8006648 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006638:	4804      	ldr	r0, [pc, #16]	; (800664c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800663a:	f7ff f803 	bl	8005644 <USBD_GetString>
  return USBD_StrDesc;
 800663e:	4b02      	ldr	r3, [pc, #8]	; (8006648 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000944 	.word	0x20000944
 800664c:	080068c8 	.word	0x080068c8

08006650 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	6039      	str	r1, [r7, #0]
 800665a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	221a      	movs	r2, #26
 8006660:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006662:	f000 f855 	bl	8006710 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8006666:	4b02      	ldr	r3, [pc, #8]	; (8006670 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000184 	.word	0x20000184

08006674 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	6039      	str	r1, [r7, #0]
 800667e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d105      	bne.n	8006692 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	4907      	ldr	r1, [pc, #28]	; (80066a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800668a:	4808      	ldr	r0, [pc, #32]	; (80066ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800668c:	f7fe ffda 	bl	8005644 <USBD_GetString>
 8006690:	e004      	b.n	800669c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	4904      	ldr	r1, [pc, #16]	; (80066a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006696:	4805      	ldr	r0, [pc, #20]	; (80066ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8006698:	f7fe ffd4 	bl	8005644 <USBD_GetString>
  }
  return USBD_StrDesc;
 800669c:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000944 	.word	0x20000944
 80066ac:	080068dc 	.word	0x080068dc

080066b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	4907      	ldr	r1, [pc, #28]	; (80066e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066c6:	4808      	ldr	r0, [pc, #32]	; (80066e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066c8:	f7fe ffbc 	bl	8005644 <USBD_GetString>
 80066cc:	e004      	b.n	80066d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	4904      	ldr	r1, [pc, #16]	; (80066e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066d2:	4805      	ldr	r0, [pc, #20]	; (80066e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066d4:	f7fe ffb6 	bl	8005644 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066d8:	4b02      	ldr	r3, [pc, #8]	; (80066e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000944 	.word	0x20000944
 80066e8:	080068f0 	.word	0x080068f0

080066ec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	4603      	mov	r3, r0
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	220c      	movs	r2, #12
 80066fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80066fe:	4b03      	ldr	r3, [pc, #12]	; (800670c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000174 	.word	0x20000174

08006710 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006716:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <Get_SerialNum+0x44>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800671c:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <Get_SerialNum+0x48>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006722:	4b0e      	ldr	r3, [pc, #56]	; (800675c <Get_SerialNum+0x4c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4413      	add	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006736:	2208      	movs	r2, #8
 8006738:	4909      	ldr	r1, [pc, #36]	; (8006760 <Get_SerialNum+0x50>)
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f814 	bl	8006768 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006740:	2204      	movs	r2, #4
 8006742:	4908      	ldr	r1, [pc, #32]	; (8006764 <Get_SerialNum+0x54>)
 8006744:	68b8      	ldr	r0, [r7, #8]
 8006746:	f000 f80f 	bl	8006768 <IntToUnicode>
  }
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	1fff7590 	.word	0x1fff7590
 8006758:	1fff7594 	.word	0x1fff7594
 800675c:	1fff7598 	.word	0x1fff7598
 8006760:	20000186 	.word	0x20000186
 8006764:	20000196 	.word	0x20000196

08006768 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]
 800677e:	e027      	b.n	80067d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	0f1b      	lsrs	r3, r3, #28
 8006784:	2b09      	cmp	r3, #9
 8006786:	d80b      	bhi.n	80067a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	0f1b      	lsrs	r3, r3, #28
 800678c:	b2da      	uxtb	r2, r3
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	4619      	mov	r1, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	440b      	add	r3, r1
 8006798:	3230      	adds	r2, #48	; 0x30
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	e00a      	b.n	80067b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	0f1b      	lsrs	r3, r3, #28
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	4619      	mov	r1, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	440b      	add	r3, r1
 80067b0:	3237      	adds	r2, #55	; 0x37
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	3301      	adds	r3, #1
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	4413      	add	r3, r2
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	3301      	adds	r3, #1
 80067ce:	75fb      	strb	r3, [r7, #23]
 80067d0:	7dfa      	ldrb	r2, [r7, #23]
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d3d3      	bcc.n	8006780 <IntToUnicode+0x18>
  }
}
 80067d8:	bf00      	nop
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80067e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800681c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80067e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80067ea:	e003      	b.n	80067f4 <LoopCopyDataInit>

080067ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80067ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80067f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80067f2:	3104      	adds	r1, #4

080067f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80067f4:	480b      	ldr	r0, [pc, #44]	; (8006824 <LoopForever+0xa>)
	ldr	r3, =_edata
 80067f6:	4b0c      	ldr	r3, [pc, #48]	; (8006828 <LoopForever+0xe>)
	adds	r2, r0, r1
 80067f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80067fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80067fc:	d3f6      	bcc.n	80067ec <CopyDataInit>
	ldr	r2, =_sbss
 80067fe:	4a0b      	ldr	r2, [pc, #44]	; (800682c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006800:	e002      	b.n	8006808 <LoopFillZerobss>

08006802 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006802:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006804:	f842 3b04 	str.w	r3, [r2], #4

08006808 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006808:	4b09      	ldr	r3, [pc, #36]	; (8006830 <LoopForever+0x16>)
	cmp	r2, r3
 800680a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800680c:	d3f9      	bcc.n	8006802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800680e:	f7ff fa17 	bl	8005c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006812:	f000 f811 	bl	8006838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006816:	f7fe fff3 	bl	8005800 <main>

0800681a <LoopForever>:

LoopForever:
    b LoopForever
 800681a:	e7fe      	b.n	800681a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800681c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006820:	08006950 	.word	0x08006950
	ldr	r0, =_sdata
 8006824:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006828:	200001a0 	.word	0x200001a0
	ldr	r2, =_sbss
 800682c:	200001a0 	.word	0x200001a0
	ldr	r3, = _ebss
 8006830:	20000b44 	.word	0x20000b44

08006834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006834:	e7fe      	b.n	8006834 <ADC1_2_IRQHandler>
	...

08006838 <__libc_init_array>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4e0d      	ldr	r6, [pc, #52]	; (8006870 <__libc_init_array+0x38>)
 800683c:	4c0d      	ldr	r4, [pc, #52]	; (8006874 <__libc_init_array+0x3c>)
 800683e:	1ba4      	subs	r4, r4, r6
 8006840:	10a4      	asrs	r4, r4, #2
 8006842:	2500      	movs	r5, #0
 8006844:	42a5      	cmp	r5, r4
 8006846:	d109      	bne.n	800685c <__libc_init_array+0x24>
 8006848:	4e0b      	ldr	r6, [pc, #44]	; (8006878 <__libc_init_array+0x40>)
 800684a:	4c0c      	ldr	r4, [pc, #48]	; (800687c <__libc_init_array+0x44>)
 800684c:	f000 f820 	bl	8006890 <_init>
 8006850:	1ba4      	subs	r4, r4, r6
 8006852:	10a4      	asrs	r4, r4, #2
 8006854:	2500      	movs	r5, #0
 8006856:	42a5      	cmp	r5, r4
 8006858:	d105      	bne.n	8006866 <__libc_init_array+0x2e>
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006860:	4798      	blx	r3
 8006862:	3501      	adds	r5, #1
 8006864:	e7ee      	b.n	8006844 <__libc_init_array+0xc>
 8006866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800686a:	4798      	blx	r3
 800686c:	3501      	adds	r5, #1
 800686e:	e7f2      	b.n	8006856 <__libc_init_array+0x1e>
 8006870:	08006948 	.word	0x08006948
 8006874:	08006948 	.word	0x08006948
 8006878:	08006948 	.word	0x08006948
 800687c:	0800694c 	.word	0x0800694c

08006880 <memset>:
 8006880:	4402      	add	r2, r0
 8006882:	4603      	mov	r3, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	d100      	bne.n	800688a <memset+0xa>
 8006888:	4770      	bx	lr
 800688a:	f803 1b01 	strb.w	r1, [r3], #1
 800688e:	e7f9      	b.n	8006884 <memset+0x4>

08006890 <_init>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	bf00      	nop
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr

0800689c <_fini>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	bf00      	nop
 80068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a2:	bc08      	pop	{r3}
 80068a4:	469e      	mov	lr, r3
 80068a6:	4770      	bx	lr
